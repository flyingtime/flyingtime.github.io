{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/beautiful-hexo/source/hexo.png","path":"hexo.png","modified":1,"renderable":1},{"_id":"themes/beautiful-hexo/source/css/blueprint-dark.png","path":"css/blueprint-dark.png","modified":1,"renderable":1},{"_id":"themes/beautiful-hexo/source/css/bootstrap-theme.css","path":"css/bootstrap-theme.css","modified":1,"renderable":1},{"_id":"themes/beautiful-hexo/source/css/bootstrap-theme.css.map","path":"css/bootstrap-theme.css.map","modified":1,"renderable":1},{"_id":"themes/beautiful-hexo/source/css/bootstrap-theme.min.css","path":"css/bootstrap-theme.min.css","modified":1,"renderable":1},{"_id":"themes/beautiful-hexo/source/css/highlight.css","path":"css/highlight.css","modified":1,"renderable":1},{"_id":"themes/beautiful-hexo/source/css/main-minimal.css","path":"css/main-minimal.css","modified":1,"renderable":1},{"_id":"themes/beautiful-hexo/source/css/main.css","path":"css/main.css","modified":1,"renderable":1},{"_id":"themes/beautiful-hexo/source/css/normalize.css","path":"css/normalize.css","modified":1,"renderable":1},{"_id":"themes/beautiful-hexo/source/css/normalize.min.css","path":"css/normalize.min.css","modified":1,"renderable":1},{"_id":"themes/beautiful-hexo/source/css/pygment_highlights.css","path":"css/pygment_highlights.css","modified":1,"renderable":1},{"_id":"themes/beautiful-hexo/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":1,"renderable":1},{"_id":"themes/beautiful-hexo/source/js/highlight.min.js","path":"js/highlight.min.js","modified":1,"renderable":1},{"_id":"themes/beautiful-hexo/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/beautiful-hexo/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":1,"renderable":1},{"_id":"themes/beautiful-hexo/source/js/bootstrap.js","path":"js/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/beautiful-hexo/source/js/jquery-1.11.2.min.js","path":"js/jquery-1.11.2.min.js","modified":1,"renderable":1},{"_id":"themes/beautiful-hexo/source/bigimgs/01.jpg","path":"bigimgs/01.jpg","modified":1,"renderable":1},{"_id":"themes/beautiful-hexo/source/bigimgs/02.jpg","path":"bigimgs/02.jpg","modified":1,"renderable":1},{"_id":"themes/beautiful-hexo/source/css/bootstrap.css","path":"css/bootstrap.css","modified":1,"renderable":1},{"_id":"themes/beautiful-hexo/source/css/bootstrap.css.map","path":"css/bootstrap.css.map","modified":1,"renderable":1},{"_id":"themes/beautiful-hexo/source/bigimgs/03.jpg","path":"bigimgs/03.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"fe45d60a53dc43dff4bc71c1d1bab8283d79ce14","modified":1477445175000},{"_id":"themes/beautiful-hexo/.gitignore","hash":"4b40e2bf9a87584f198091434ed6f7ebbb829497","modified":1477377932000},{"_id":"themes/beautiful-hexo/LICENSE","hash":"99f2c87ae44734a9285212301c19293d2495bf79","modified":1477377932000},{"_id":"themes/beautiful-hexo/README.md","hash":"e3837c2ac6bfce5f03f91a28f9413e712c2b8ff9","modified":1477377932000},{"_id":"themes/beautiful-hexo/_config.yml","hash":"8498a8008830c905dcf3be9f07ded51c3945a663","modified":1477378691000},{"_id":"themes/beautiful-hexo/package.json","hash":"d84cf6dc4ebd800a768501843180341e87a84ae3","modified":1477377932000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1477449629000},{"_id":"source/_posts/Golang搭建单、双向自认证HTTPS服务器.md","hash":"54c75e0bda031811c0d9d8a618c77ac8fa69012b","modified":1477551627000},{"_id":"source/_posts/Netcore-Native测试.md","hash":"d9b76b95c46e4cb1901b1f85955136c8cad2917c","modified":1477556441000},{"_id":"source/_posts/VS2015-Entity-Framework-6-x-Mysql的一些问题.md","hash":"f9e476511cc5a150e05782219b9da614aa45233c","modified":1477578792000},{"_id":"source/about/index.md","hash":"0053150f90c35c7a57c24b21c201bddb163cb052","modified":1477443241000},{"_id":"themes/beautiful-hexo/.git/COMMIT_EDITMSG","hash":"48a0822fbf68ebd7f1db68e7aead4918bd002481","modified":1477382553000},{"_id":"themes/beautiful-hexo/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1477377932000},{"_id":"themes/beautiful-hexo/.git/config","hash":"7671424a4f73eab9257f76faec4165dd9858ff42","modified":1477377932000},{"_id":"themes/beautiful-hexo/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1477377905000},{"_id":"themes/beautiful-hexo/.git/index","hash":"99ed07519c0a72e609a656b54548d442e867d4b2","modified":1477382553000},{"_id":"themes/beautiful-hexo/.git/packed-refs","hash":"36e77cdbb75bd00e62424cf7b0e09fe7048474d9","modified":1477377932000},{"_id":"themes/beautiful-hexo/.git/shallow","hash":"88c36ac58fe246a0803dc55da24ba4d73e2870b0","modified":1477377909000},{"_id":"themes/beautiful-hexo/languages/en.yml","hash":"edca6efa5afd7ca478391bd24be970d2c04ddfbd","modified":1477377932000},{"_id":"themes/beautiful-hexo/languages/zh-cn.yml","hash":"538fa673943ef185d6af23414693042c24b18684","modified":1477377932000},{"_id":"themes/beautiful-hexo/layout/archive.jade","hash":"b599d808e8f400244bdf84452551ea8ea5a4c70b","modified":1477377932000},{"_id":"themes/beautiful-hexo/layout/index.jade","hash":"4aa0a20b9dcbd0905fcfb2589362a41d523d72c2","modified":1477377932000},{"_id":"themes/beautiful-hexo/layout/page.jade","hash":"8ccd83e78150213c21d5941846cdef757f37c581","modified":1477377932000},{"_id":"themes/beautiful-hexo/layout/post.jade","hash":"afba374e8ba51e15a8d879cbe77994357fbc972a","modified":1477377932000},{"_id":"themes/beautiful-hexo/source/hexo.png","hash":"e814051ff5e255deebff24733f760a898f8f2e69","modified":1477377932000},{"_id":"themes/beautiful-hexo/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1477377905000},{"_id":"themes/beautiful-hexo/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1477377905000},{"_id":"themes/beautiful-hexo/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1477377905000},{"_id":"themes/beautiful-hexo/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1477377905000},{"_id":"themes/beautiful-hexo/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1477377905000},{"_id":"themes/beautiful-hexo/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1477377905000},{"_id":"themes/beautiful-hexo/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1477377905000},{"_id":"themes/beautiful-hexo/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1477377905000},{"_id":"themes/beautiful-hexo/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1477377905000},{"_id":"themes/beautiful-hexo/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1477377905000},{"_id":"themes/beautiful-hexo/.git/logs/HEAD","hash":"90e0ab75faab23e9d0bdc04a088f11a60521d74c","modified":1477382553000},{"_id":"themes/beautiful-hexo/layout/partial/base.jade","hash":"396af6da8c6b16f7982a16b128b81b8817b59624","modified":1477377932000},{"_id":"themes/beautiful-hexo/layout/partial/comment.jade","hash":"c1978d742705232d9e2ef1e3d05bb4ab451ec3da","modified":1477377932000},{"_id":"themes/beautiful-hexo/layout/partial/footer-scripts.jade","hash":"4106ddcd70030caf9d83ca0cb305266409a48cd7","modified":1477377932000},{"_id":"themes/beautiful-hexo/layout/partial/footer.jade","hash":"af990c40dbde9bd44aab32331efda6179f9d7eec","modified":1477377932000},{"_id":"themes/beautiful-hexo/layout/partial/google_analytics.jade","hash":"4972fd998aa0ac476c4a4a497407b80fe3dc1af8","modified":1477377932000},{"_id":"themes/beautiful-hexo/layout/partial/head.jade","hash":"ec603125ea1f9c637ba7af03d4d89c70ebdf3ba0","modified":1477377932000},{"_id":"themes/beautiful-hexo/layout/partial/index-header.jade","hash":"b4db74194f0500a5786b3e385c39965562ce0806","modified":1477377932000},{"_id":"themes/beautiful-hexo/layout/partial/nav.jade","hash":"efdb2145ca041f4828269f12125e88ac78ac4c8c","modified":1477377932000},{"_id":"themes/beautiful-hexo/layout/partial/post-meta.jade","hash":"bb0acc88e7527e3d95de2f2b6029957b96a0e7cc","modified":1477377932000},{"_id":"themes/beautiful-hexo/source/css/blueprint-dark.png","hash":"725b992538a19f5ded0329c8a778dcd74bca7522","modified":1477377932000},{"_id":"themes/beautiful-hexo/source/css/bootstrap-theme.css","hash":"815675548997eadc98fc4beb1b698b35c2d5c5cb","modified":1477377932000},{"_id":"themes/beautiful-hexo/source/css/bootstrap-theme.css.map","hash":"ccb7ff3435bb5cff1fe9643fc0ac8cdde2dcd177","modified":1477377932000},{"_id":"themes/beautiful-hexo/source/css/bootstrap-theme.min.css","hash":"36f0fd5cb451590d055b38f6afad8c69f74bfc9a","modified":1477377932000},{"_id":"themes/beautiful-hexo/source/css/highlight.css","hash":"3c0cd05d7c1e3d00203e72a3f6ac99f521e2455c","modified":1477377932000},{"_id":"themes/beautiful-hexo/source/css/main-minimal.css","hash":"e2b7f8ccfdb858c3969c756aa94a761970349d68","modified":1477377932000},{"_id":"themes/beautiful-hexo/source/css/main.css","hash":"0365f1b95ab1fa71aba4992582a4b67ea3f48c5b","modified":1477377932000},{"_id":"themes/beautiful-hexo/source/css/normalize.css","hash":"6924ce12bf79586ce0c095157aed4438e97bbe89","modified":1477377932000},{"_id":"themes/beautiful-hexo/source/css/normalize.min.css","hash":"a8d03b757f75752e15aa9e43ed8c071cb50e848d","modified":1477377932000},{"_id":"themes/beautiful-hexo/source/css/pygment_highlights.css","hash":"f4e5374eae88aa573b9bef83ae131a0f05cc94e7","modified":1477377932000},{"_id":"themes/beautiful-hexo/source/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1477377932000},{"_id":"themes/beautiful-hexo/source/js/highlight.min.js","hash":"49cd3a843a1f8a46d00d6e936bda839e2091951c","modified":1477377932000},{"_id":"themes/beautiful-hexo/source/js/main.js","hash":"9e9bf3864ac1db24c5b20f46d92557b815d36d93","modified":1477377932000},{"_id":"themes/beautiful-hexo/source/css/bootstrap.min.css","hash":"973e37a8502921d56bc02bb55321f45b072b6f71","modified":1477377932000},{"_id":"themes/beautiful-hexo/source/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1477377932000},{"_id":"themes/beautiful-hexo/source/js/jquery-1.11.2.min.js","hash":"8130544c215fe5d1ec081d83461bf4a711e74882","modified":1477377932000},{"_id":"themes/beautiful-hexo/.git/objects/05/813ae9a490999bba5621892040e0c58c5204e6","hash":"16b85228eaf759d440162f2a48063c63e51e4117","modified":1477382553000},{"_id":"themes/beautiful-hexo/.git/objects/03/b2586b62aa00365dabe65760bb317a5c156f94","hash":"a5baca267bb8d35ac51372774590a85afe30a609","modified":1477377908000},{"_id":"themes/beautiful-hexo/.git/objects/07/85ec98903acfb9428ca474fa533b96859764eb","hash":"38221d3ead8b856b7991418bce43d79a374ecdc5","modified":1477377919000},{"_id":"themes/beautiful-hexo/.git/objects/0f/36e2ee45f74edf146924a4d215a33f92ad64fe","hash":"38aa872a38b526d1f508fb77a4146e812107a53b","modified":1477377919000},{"_id":"themes/beautiful-hexo/.git/objects/18/ddf7fede130e870c5cdd33945d3321f8e2f2a0","hash":"9dea4d8427365e3f8420ed13877bb26788eb6ac7","modified":1477377930000},{"_id":"themes/beautiful-hexo/.git/objects/1c/8b8ef8f0bd7882816a0ddc739efdbe9878f98f","hash":"797d760394a6c4fdb48e26fa156af2804c42b6b6","modified":1477377930000},{"_id":"themes/beautiful-hexo/.git/objects/23/360a002c359b20a93554ace0832e7f5e2d217a","hash":"0768d781407b0c8ecaaf2afd28c11582d16f0517","modified":1477377919000},{"_id":"themes/beautiful-hexo/.git/objects/24/08b6dcdafd3da54f0e8208c960d7ae39e40050","hash":"ff32916146762ea29136e20ffffba0c76add803a","modified":1477377908000},{"_id":"themes/beautiful-hexo/.git/objects/28/057fb70d94441f6842e5d88a6ffc2eeb5496f8","hash":"aea9f1e436bd03d30a57a2f778aa4531431b22af","modified":1477382553000},{"_id":"themes/beautiful-hexo/.git/objects/28/f154dec4aaff15b67944b3dc71e3b706793090","hash":"ad3d8b5a2439c0691c2ba383c37ad35956ae306a","modified":1477377930000},{"_id":"themes/beautiful-hexo/.git/objects/2b/f6fb98c0b902fea5f932d34cd7961576963889","hash":"1ebd8480eeaa3d3684ec97274763c9b9e0a945ac","modified":1477377930000},{"_id":"themes/beautiful-hexo/.git/objects/39/3b27cad68f9b89ddb0b29909d440055b1f3c6c","hash":"103bf534033f482af743c2041c692cc835c17108","modified":1477377919000},{"_id":"themes/beautiful-hexo/.git/objects/41/39b6fc3bb3c3243abcb8c1b72d4db424e86512","hash":"5d7d27b9f8db50c458423540bf65e1ac177af23e","modified":1477377930000},{"_id":"themes/beautiful-hexo/.git/objects/44/e6339b33d2312ff344bb060dc1c68aad10810d","hash":"c0a7c8dec2257b192e6488bc94d6fd0199717b46","modified":1477377930000},{"_id":"themes/beautiful-hexo/.git/objects/46/896824d66fc377fab9b7bd2ab2599509412f0a","hash":"92cc2c77b60227d3233d1fba850ec62636620354","modified":1477377932000},{"_id":"themes/beautiful-hexo/.git/objects/4b/62e004eaa354cea3f0394c5df7dfc639f1effb","hash":"b4048e3ddcc74e8e068898806b0e77b039ad3682","modified":1477377930000},{"_id":"themes/beautiful-hexo/.git/objects/4e/74fe68dbcfe04629c48de651f91a5d11375e7f","hash":"579a77591ce07ee557256b6cc1fb679251bdddb9","modified":1477377908000},{"_id":"themes/beautiful-hexo/.git/objects/4d/e5703a2a5610d551555886c8367ab8f1f72ef8","hash":"ed3c8dd01202d9acdca2efe07fa0d4ac1f32035c","modified":1477377908000},{"_id":"themes/beautiful-hexo/.git/objects/55/631ea42aa0a1becbd50798f99d7cb19969125a","hash":"cc66e73d9b27aa9ce200a05458ae790e0e0a8a40","modified":1477377930000},{"_id":"themes/beautiful-hexo/.git/objects/5a/12d631732892b7f236fdda9acbd21edfa0c19a","hash":"fc9056c69cd54389d8b0b46c36c12cea30f7d856","modified":1477377930000},{"_id":"themes/beautiful-hexo/.git/objects/6b/aca797071b482a6122a23f49f7f7c541f715c9","hash":"8d7cf3deaa2af4d9af9d0e829a07baaa899edfad","modified":1477377930000},{"_id":"themes/beautiful-hexo/.git/objects/75/7f8847851ed5f35c6aa20ed2ad8c8d91e59c31","hash":"f2d20ab5fc37d507269ac5dc3f60905a380518bf","modified":1477377919000},{"_id":"themes/beautiful-hexo/.git/objects/77/9e5acfb018e8cf3a184116561337c17e93e5ed","hash":"64b755d83d07529560dc1498ca8bc321e0bd226e","modified":1477377930000},{"_id":"themes/beautiful-hexo/.git/objects/79/fe00036d40052d8c3494b4d3259e942a4baae9","hash":"61ba980152a646633ba29ddd42e342f265229135","modified":1477377919000},{"_id":"themes/beautiful-hexo/.git/objects/89/18152db5d9ca5e8fd00712c62cfd3502d81a5f","hash":"7acb80a99fefdc484ac450709396382a393c5c5f","modified":1477377919000},{"_id":"themes/beautiful-hexo/.git/objects/94/e7b634d4adbd1f6ecfa8ce90bc1005a89fe10a","hash":"a449fb0d50a359ffc05a162b97e565e0dab8961d","modified":1477382553000},{"_id":"themes/beautiful-hexo/.git/objects/95/19efc0304e06cb81ce8b018568d8ac8b36952d","hash":"f6782548e73aeaaffca29e4b440020e27aa8f619","modified":1477377908000},{"_id":"themes/beautiful-hexo/.git/objects/97/b159e3d0a28f8c06a0699be852b0cb71bf2582","hash":"69ebcd414e1debaa069e91fda7160c81135c31c7","modified":1477377932000},{"_id":"themes/beautiful-hexo/.git/objects/a1/08e1526555dcd12d16e52658fed4ea403c01ec","hash":"c27671443cfee8978bb6606f68b4dda1429e3400","modified":1477377908000},{"_id":"themes/beautiful-hexo/.git/objects/a4/e90f0267b281fa15b9c2027576c4e7e734baba","hash":"117e5cb65410993fd4179987da1d3c0804f834fa","modified":1477377919000},{"_id":"themes/beautiful-hexo/.git/objects/ac/8dd55055a9c838e029d2c0c6d2b3644d6c9038","hash":"3dc9601604b876e678f4fa580078b37ae8522298","modified":1477377930000},{"_id":"themes/beautiful-hexo/.git/objects/af/212419a8bd492055188a0d6e7d791b214a152a","hash":"31080dddff87e5cceb240e5344c27e9676b11951","modified":1477377919000},{"_id":"themes/beautiful-hexo/.git/objects/b0/e046c9779c6e91c36ac6a34294356a9a84c516","hash":"395d950d8a8418ad6546b2b8c27c3e99e8ec0199","modified":1477377919000},{"_id":"themes/beautiful-hexo/.git/objects/b4/670f3a82c3423d9b5abfc3e7ddc7a6e7fd9f47","hash":"22c591a0a62cafb60a6dfd2b7744bfeb4e6f7ab8","modified":1477377919000},{"_id":"themes/beautiful-hexo/.git/objects/bb/663496dc734fadbe96b3f13c9c184e03d87bbe","hash":"586f7e9ba90b9529cffd8c28feddbe4c5a5ad0ed","modified":1477377929000},{"_id":"themes/beautiful-hexo/.git/objects/c4/6af7dfbda90bd819d422ef941a49c65de63d27","hash":"133dd30d68bfe76a74aa54ab4ce243dab46b0a16","modified":1477377929000},{"_id":"themes/beautiful-hexo/.git/objects/c6/d36920be36e3d61f7807f56db65cfe25d28f35","hash":"ec63fc71de626ab69cd380118cbdb4da2c9e0fc8","modified":1477377930000},{"_id":"themes/beautiful-hexo/.git/objects/d9/41820fc34e2e669ec9b9678e71a9d51945edb3","hash":"e2c17481023e61e719bd8bfa07d9497fdf1ebbf3","modified":1477377908000},{"_id":"themes/beautiful-hexo/.git/objects/ca/532f1f17c4051e4c75c978ee96ed1ceb5d3043","hash":"2af5ba7fa84090a6fdacc51bba455a313d61a42e","modified":1477377919000},{"_id":"themes/beautiful-hexo/.git/objects/dc/5cb3370e9357896ebda82f128ee1876d679c91","hash":"ecb5918f10fd6cdcdb2d9721205e4fb877a2e754","modified":1477377919000},{"_id":"themes/beautiful-hexo/.git/objects/de/093e742c08dc80b0417f11e506e84d1fd46579","hash":"1410bdc16477a8449dc969d5fc51c6d7dcb6f61a","modified":1477377919000},{"_id":"themes/beautiful-hexo/.git/objects/ea/1d136cb6c1285d6a250692dae86cd285491924","hash":"4a14284e16531edf66abefa156a69305f36dfdb8","modified":1477377928000},{"_id":"themes/beautiful-hexo/.git/objects/e6/a051d0d1d32752ae08d9cf30fe5952da22a9b0","hash":"823f6ead40ed9e7da9e2451ce34ea04a6410b377","modified":1477377932000},{"_id":"themes/beautiful-hexo/.git/objects/ef/55a1471008ff56ab5662d1760991180371d710","hash":"fd410381f5f4db4da362888d7f72a5c422c6438b","modified":1477377919000},{"_id":"themes/beautiful-hexo/.git/objects/f0/ec5e7be165d9a981919156c621bf13e6f3205e","hash":"9d22b4585d7b3c2dfa29052e5b69b38173e85ef4","modified":1477377919000},{"_id":"themes/beautiful-hexo/.git/objects/f2/3b504eda275c36d79d4e831c1d19d58d2f812f","hash":"d5ea236beeb4d9df3d4567daf02faea902a2b816","modified":1477377919000},{"_id":"themes/beautiful-hexo/.git/objects/f5/b88ca2458eb750d7203469f33cdad2e226b9d7","hash":"cae5681fd953ad132fa1ddc2f893d079960a8a54","modified":1477377928000},{"_id":"themes/beautiful-hexo/.git/objects/f6/6a7e3a31f14176c7cfdf36bb942fc19788a0f9","hash":"3e9b3980498e9488daf431e05d25de525f27b25b","modified":1477377919000},{"_id":"themes/beautiful-hexo/.git/objects/f7/8e358973134003a7ef09f2396d8d8cd454c8d8","hash":"a0bedce3b06dfc9505a99cf7c0b08f3bce5a0a89","modified":1477377919000},{"_id":"themes/beautiful-hexo/.git/objects/f7/9bc8c52c66e21338e5266e2aeac4c5754ca2ac","hash":"baebe7a26db169ae753b9a55898022ca8cf98f60","modified":1477377919000},{"_id":"themes/beautiful-hexo/.git/objects/fa/7fbcb94c5779af590dcff321e6d1641c285186","hash":"7183717593b89b7c13c163583d233784d5d0dc77","modified":1477377919000},{"_id":"themes/beautiful-hexo/.git/refs/heads/master","hash":"de0e6ff5034aea54e557f7ff937ff36c4487c217","modified":1477382553000},{"_id":"themes/beautiful-hexo/source/bigimgs/01.jpg","hash":"ae76cf647dbafb8028af35b4ffceef8b2e1e9e90","modified":1477377932000},{"_id":"themes/beautiful-hexo/source/bigimgs/02.jpg","hash":"2653ffdd705d4e6976a0bf9fab46422b402bac1e","modified":1477377932000},{"_id":"themes/beautiful-hexo/source/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1477377932000},{"_id":"themes/beautiful-hexo/.git/objects/ff/579ff56d068832f7b857c08318375643af3119","hash":"aa46be515f2245e1eb96d9a1b59ce7c5a61f12b9","modified":1477377929000},{"_id":"themes/beautiful-hexo/.git/logs/refs/heads/master","hash":"90e0ab75faab23e9d0bdc04a088f11a60521d74c","modified":1477382553000},{"_id":"themes/beautiful-hexo/.git/objects/6e/453c38baa78815227222613777c48cd86b901b","hash":"37497457c2e9eeff27964bc5fb90b0e1e33bdefe","modified":1477377923000},{"_id":"themes/beautiful-hexo/.git/objects/ae/2a14f2c0f71ab01fbeeef5f8a53e93546a227f","hash":"7dbc54a928c651c1dfcc768efe74187b569a0d77","modified":1477377921000},{"_id":"themes/beautiful-hexo/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1477377932000},{"_id":"themes/beautiful-hexo/source/css/bootstrap.css.map","hash":"5009e973465fbe2477b22e4dcd1041e6bb385c21","modified":1477377932000},{"_id":"themes/beautiful-hexo/.git/logs/refs/remotes/origin/HEAD","hash":"8e5c45c1c3c1681db9c8651afea102ed969b3cbc","modified":1477377932000},{"_id":"themes/beautiful-hexo/source/bigimgs/03.jpg","hash":"356f0a8c82e467f931cde454b398738e27feeadf","modified":1477377932000},{"_id":"themes/beautiful-hexo/.git/objects/73/077ee876c9c09bcd25ab921c269f1a1ba8c07c","hash":"81894ea2318d59a2ff5af179bb2d0a24d1cd3a7c","modified":1477377928000},{"_id":"themes/beautiful-hexo/images/hexo-preview.png","hash":"7b7f2e94d787da46dc74f4e070d6cd74a8ae0f7f","modified":1477377932000},{"_id":"themes/beautiful-hexo/.git/objects/b6/f22f835399ff4d2cb34d52ca44f98afe0f4735","hash":"0b2a828603e96c9547606d0b2b18e04a5a141abd","modified":1477377919000},{"_id":"public/atom.xml","hash":"b9af9a59d5bc4d64a1dbb1da1b98899ce3784a02","modified":1477578927160},{"_id":"public/sitemap.xml","hash":"b97628f58cc38af8ccdb0036d360afe42630cb5b","modified":1477578927163},{"_id":"public/about/index.html","hash":"9a751766ae4677d94fd0f7dde0eddd38ecf52eb9","modified":1477578927175},{"_id":"public/2016/10/27/Netcore-Native测试/index.html","hash":"9b1d22ac19fdfd3ba013c1eb20e7c9662032ac3b","modified":1477578927175},{"_id":"public/2016/06/29/VS2015-Entity-Framework-6-x-Mysql的一些问题/index.html","hash":"bd53ca437d8aab3ef4980f8b8c9a6eb8f59d5360","modified":1477578927175},{"_id":"public/archives/index.html","hash":"8ac90179d96c4b6720c896e424c3d48a5657783d","modified":1477578927175},{"_id":"public/categories/golang/index.html","hash":"409566082e8f23becadae284c99bbf318bab43c7","modified":1477578927175},{"_id":"public/categories/c/index.html","hash":"87ca6b2af5f094a5babe6a70a2edb3a71110c008","modified":1477578927175},{"_id":"public/categories/c/net-core/index.html","hash":"87ca6b2af5f094a5babe6a70a2edb3a71110c008","modified":1477578927175},{"_id":"public/index.html","hash":"5f08ec1cb966f1b219bf13d202b5ea817350e73c","modified":1477578927176},{"_id":"public/tags/golang/index.html","hash":"409566082e8f23becadae284c99bbf318bab43c7","modified":1477578927176},{"_id":"public/tags/https/index.html","hash":"409566082e8f23becadae284c99bbf318bab43c7","modified":1477578927176},{"_id":"public/tags/c/index.html","hash":"ba8443f01b06e1c4bb539c5a1707d7df210e2013","modified":1477578927176},{"_id":"public/tags/netcore/index.html","hash":"87ca6b2af5f094a5babe6a70a2edb3a71110c008","modified":1477578927176},{"_id":"public/tags/native/index.html","hash":"87ca6b2af5f094a5babe6a70a2edb3a71110c008","modified":1477578927177},{"_id":"public/tags/asp-net/index.html","hash":"ab6049f3ff13d437e01d1f515f2ef25bd2f9fdb0","modified":1477578927177},{"_id":"public/tags/entity-framework/index.html","hash":"ab6049f3ff13d437e01d1f515f2ef25bd2f9fdb0","modified":1477578927177},{"_id":"public/tags/mysql/index.html","hash":"ab6049f3ff13d437e01d1f515f2ef25bd2f9fdb0","modified":1477578927177},{"_id":"public/2016/10/26/Golang搭建单、双向自认证HTTPS服务器/index.html","hash":"76dad174a76d4cc6a47fce4d9f3e014b2898f1b6","modified":1477578927178},{"_id":"public/hexo.png","hash":"e814051ff5e255deebff24733f760a898f8f2e69","modified":1477578927183},{"_id":"public/css/blueprint-dark.png","hash":"725b992538a19f5ded0329c8a778dcd74bca7522","modified":1477578927183},{"_id":"public/css/bootstrap-theme.css.map","hash":"ccb7ff3435bb5cff1fe9643fc0ac8cdde2dcd177","modified":1477578927183},{"_id":"public/css/highlight.css","hash":"3c0cd05d7c1e3d00203e72a3f6ac99f521e2455c","modified":1477578927198},{"_id":"public/css/main-minimal.css","hash":"e2b7f8ccfdb858c3969c756aa94a761970349d68","modified":1477578927198},{"_id":"public/css/main.css","hash":"0365f1b95ab1fa71aba4992582a4b67ea3f48c5b","modified":1477578927198},{"_id":"public/css/normalize.css","hash":"6924ce12bf79586ce0c095157aed4438e97bbe89","modified":1477578927198},{"_id":"public/css/normalize.min.css","hash":"a8d03b757f75752e15aa9e43ed8c071cb50e848d","modified":1477578927198},{"_id":"public/js/main.js","hash":"9e9bf3864ac1db24c5b20f46d92557b815d36d93","modified":1477578927198},{"_id":"public/css/pygment_highlights.css","hash":"f4e5374eae88aa573b9bef83ae131a0f05cc94e7","modified":1477578927198},{"_id":"public/css/bootstrap-theme.css","hash":"815675548997eadc98fc4beb1b698b35c2d5c5cb","modified":1477578927198},{"_id":"public/css/bootstrap-theme.min.css","hash":"36f0fd5cb451590d055b38f6afad8c69f74bfc9a","modified":1477578927198},{"_id":"public/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1477578927198},{"_id":"public/js/jquery-1.11.2.min.js","hash":"8130544c215fe5d1ec081d83461bf4a711e74882","modified":1477578927198},{"_id":"public/js/highlight.min.js","hash":"49cd3a843a1f8a46d00d6e936bda839e2091951c","modified":1477578927198},{"_id":"public/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1477578927199},{"_id":"public/css/bootstrap.min.css","hash":"973e37a8502921d56bc02bb55321f45b072b6f71","modified":1477578927199},{"_id":"public/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1477578927199},{"_id":"public/bigimgs/01.jpg","hash":"ae76cf647dbafb8028af35b4ffceef8b2e1e9e90","modified":1477578927199},{"_id":"public/bigimgs/02.jpg","hash":"2653ffdd705d4e6976a0bf9fab46422b402bac1e","modified":1477578927199},{"_id":"public/css/bootstrap.css.map","hash":"5009e973465fbe2477b22e4dcd1041e6bb385c21","modified":1477578927205},{"_id":"public/bigimgs/03.jpg","hash":"356f0a8c82e467f931cde454b398738e27feeadf","modified":1477578927213}],"Category":[{"name":"golang","_id":"ciusgcbku0002c80aui9ihvyu"},{"name":"c#","_id":"ciusgcbl10005c80ac5u2kxvn"},{"name":".net core","parent":"ciusgcbl10005c80ac5u2kxvn","_id":"ciusgcbl3000ac80akwmrz1pz"}],"Data":[],"Page":[{"_content":"# 关于\n\n-------\n\n## 简介\n<img src=\"/bigimgs/me.jpg\" width=\"120px\" height=\"160px\">\n \n    苏世龙，毕业于山东理工大学计算机信息与技术专业，2007年毕业至今一直从事计算机编程、设计、管理等工作\n### 所在地\n    中国山东省青岛市黄岛区\n### 爱好\n    编程、玩游戏、听音乐、唱歌、下棋\n### 喜欢的编程语言\n    C++、C#、Delphi、Golang、Python、Lua\n### Email\n<flyingtimeice@163.com>\n<flyingtimeice@gmail.com>\n### QQ\n    22753160\n### 微信\n![](/bigimgs/weixin.png)\n\n-------\n\n\n\n\n","source":"about/index.md","raw":"# 关于\n\n-------\n\n## 简介\n<img src=\"/bigimgs/me.jpg\" width=\"120px\" height=\"160px\">\n \n    苏世龙，毕业于山东理工大学计算机信息与技术专业，2007年毕业至今一直从事计算机编程、设计、管理等工作\n### 所在地\n    中国山东省青岛市黄岛区\n### 爱好\n    编程、玩游戏、听音乐、唱歌、下棋\n### 喜欢的编程语言\n    C++、C#、Delphi、Golang、Python、Lua\n### Email\n<flyingtimeice@163.com>\n<flyingtimeice@gmail.com>\n### QQ\n    22753160\n### 微信\n![](/bigimgs/weixin.png)\n\n-------\n\n\n\n\n","date":"2016-10-26T00:54:01.000Z","updated":"2016-10-26T00:54:01.000Z","path":"about/index.html","title":"","comments":1,"layout":"page","_id":"ciusgcc00000rc80a56nb1zeq","content":"<h1 id=\"关于\"><a href=\"#关于\" class=\"headerlink\" title=\"关于\"></a>关于</h1><hr>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><img src=\"/bigimgs/me.jpg\" width=\"120px\" height=\"160px\"></p>\n<pre><code>苏世龙，毕业于山东理工大学计算机信息与技术专业，2007年毕业至今一直从事计算机编程、设计、管理等工作\n</code></pre><h3 id=\"所在地\"><a href=\"#所在地\" class=\"headerlink\" title=\"所在地\"></a>所在地</h3><pre><code>中国山东省青岛市黄岛区\n</code></pre><h3 id=\"爱好\"><a href=\"#爱好\" class=\"headerlink\" title=\"爱好\"></a>爱好</h3><pre><code>编程、玩游戏、听音乐、唱歌、下棋\n</code></pre><h3 id=\"喜欢的编程语言\"><a href=\"#喜欢的编程语言\" class=\"headerlink\" title=\"喜欢的编程语言\"></a>喜欢的编程语言</h3><pre><code>C++、C#、Delphi、Golang、Python、Lua\n</code></pre><h3 id=\"Email\"><a href=\"#Email\" class=\"headerlink\" title=\"Email\"></a>Email</h3><p><a href=\"&#109;&#97;&#105;&#108;&#116;&#111;&#x3a;&#102;&#108;&#121;&#x69;&#x6e;&#103;&#116;&#105;&#109;&#101;&#x69;&#99;&#x65;&#x40;&#x31;&#54;&#x33;&#46;&#99;&#x6f;&#x6d;\">&#102;&#108;&#121;&#x69;&#x6e;&#103;&#116;&#105;&#109;&#101;&#x69;&#99;&#x65;&#x40;&#x31;&#54;&#x33;&#46;&#99;&#x6f;&#x6d;</a><br><a href=\"&#x6d;&#x61;&#105;&#x6c;&#x74;&#111;&#58;&#x66;&#108;&#121;&#105;&#110;&#103;&#x74;&#105;&#109;&#101;&#x69;&#99;&#x65;&#64;&#x67;&#x6d;&#97;&#105;&#x6c;&#46;&#x63;&#x6f;&#x6d;\">&#x66;&#108;&#121;&#105;&#110;&#103;&#x74;&#105;&#109;&#101;&#x69;&#99;&#x65;&#64;&#x67;&#x6d;&#97;&#105;&#x6c;&#46;&#x63;&#x6f;&#x6d;</a></p>\n<h3 id=\"QQ\"><a href=\"#QQ\" class=\"headerlink\" title=\"QQ\"></a>QQ</h3><pre><code>22753160\n</code></pre><h3 id=\"微信\"><a href=\"#微信\" class=\"headerlink\" title=\"微信\"></a>微信</h3><p><img src=\"/bigimgs/weixin.png\" alt=\"\"></p>\n<hr>\n","excerpt":"","more":"<h1 id=\"关于\"><a href=\"#关于\" class=\"headerlink\" title=\"关于\"></a>关于</h1><hr>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><img src=\"/bigimgs/me.jpg\" width=\"120px\" height=\"160px\"></p>\n<pre><code>苏世龙，毕业于山东理工大学计算机信息与技术专业，2007年毕业至今一直从事计算机编程、设计、管理等工作\n</code></pre><h3 id=\"所在地\"><a href=\"#所在地\" class=\"headerlink\" title=\"所在地\"></a>所在地</h3><pre><code>中国山东省青岛市黄岛区\n</code></pre><h3 id=\"爱好\"><a href=\"#爱好\" class=\"headerlink\" title=\"爱好\"></a>爱好</h3><pre><code>编程、玩游戏、听音乐、唱歌、下棋\n</code></pre><h3 id=\"喜欢的编程语言\"><a href=\"#喜欢的编程语言\" class=\"headerlink\" title=\"喜欢的编程语言\"></a>喜欢的编程语言</h3><pre><code>C++、C#、Delphi、Golang、Python、Lua\n</code></pre><h3 id=\"Email\"><a href=\"#Email\" class=\"headerlink\" title=\"Email\"></a>Email</h3><p><a href=\"&#109;&#97;&#105;&#108;&#116;&#111;&#x3a;&#102;&#108;&#121;&#x69;&#x6e;&#103;&#116;&#105;&#109;&#101;&#x69;&#99;&#x65;&#x40;&#x31;&#54;&#x33;&#46;&#99;&#x6f;&#x6d;\">&#102;&#108;&#121;&#x69;&#x6e;&#103;&#116;&#105;&#109;&#101;&#x69;&#99;&#x65;&#x40;&#x31;&#54;&#x33;&#46;&#99;&#x6f;&#x6d;</a><br><a href=\"&#x6d;&#x61;&#105;&#x6c;&#x74;&#111;&#58;&#x66;&#108;&#121;&#105;&#110;&#103;&#x74;&#105;&#109;&#101;&#x69;&#99;&#x65;&#64;&#x67;&#x6d;&#97;&#105;&#x6c;&#46;&#x63;&#x6f;&#x6d;\">&#x66;&#108;&#121;&#105;&#110;&#103;&#x74;&#105;&#109;&#101;&#x69;&#99;&#x65;&#64;&#x67;&#x6d;&#97;&#105;&#x6c;&#46;&#x63;&#x6f;&#x6d;</a></p>\n<h3 id=\"QQ\"><a href=\"#QQ\" class=\"headerlink\" title=\"QQ\"></a>QQ</h3><pre><code>22753160\n</code></pre><h3 id=\"微信\"><a href=\"#微信\" class=\"headerlink\" title=\"微信\"></a>微信</h3><p><img src=\"/bigimgs/weixin.png\" alt=\"\"></p>\n<hr>\n"}],"Post":[{"title":"Golang搭建单、双向自认证HTTPS服务器","date":"2016-10-26T01:25:51.000Z","_content":"\n### 前言\n>2015年双11期间淘宝、天猫实现了全站式https安全传输，web安全问题已经成了人们关注的话题，那什么是https呢？如何实现单、双向自认证https服务器呢？接下来我们将一一介绍。\n\n## 一、HTTPS相关概念已经认证流程\n#### 基本概念：\n[**HTTPS**](http://baike.baidu.com/link?url=XuEFqp8HTAIWBO12QMzj54K1iIBGPL6VJGPEn85nyCirdG8LE104hMYvOeDgfucyMf3gu1zPLap3i0BKb-SKHa)（全称：Hyper Text Transfer Protocol over Secure Socket Layer），是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。 它是一个URI scheme（抽象标识符体系），句法类同http:体系。用于安全的HTTP数据传输。https:URL表明它使用了HTTP，但HTTPS存在不同于HTTP的默认端口及一个加密/身份验证层（在HTTP与TCP之间）。这个系统的最初研发由网景公司(Netscape)进行，并内置于其浏览器Netscape Navigator中，提供了身份验证与加密通讯方法。现在它被广泛用于万维网上安全敏感的通讯，例如交易支付方面。关于https详细介绍请见：[大型网站的HTTPS实践](http://studygolang.com/articles/2984)。\n\n**SSL**(Secure Socket Layer)：是Netscape公司设计的主要用于WEB的安全传输协议。从名字就可以看出它在https协议栈中负责实现上面提到的加密层。\n\n**数字证书**：一种文件的名称，好比一个机构或人的签名，能够证明这个机构或人的真实性。其中包含的信息，用于实现上述功能。\n\n**加密和认证**：加密是指通信双方为了防止铭感信息在信道上被第三方窃听而泄漏，将明文通过加密变成密文，如果第三方无法解密的话，就算他获得密文也无能为力；认证是指通信双方为了确认对方是值得信任的消息发送或接受方，而不是使用假身份的非法者，采取的确认身份的方式。只有同时进行了加密和认证才能保证通信的安全，因此在SSL通信协议中这两者都被应。早期一般是用对称加密算法，现在一般都是不对称加密，最常见的算法就是RSA。\n\n**消息摘要**：这个技术主要是为了避免消息被篡改。消息摘要是把一段信息，通过某种算法，得出一串字符串。这个字符串就是消息的摘要。如果消息被篡改（发生了变化），那么摘要也一定会发生变化（如果2个不同的消息生成的摘要是一样的，那么这就叫发生了碰撞）。消息摘要的算法主要有MD5和SHA，在证书领域，一般都是用SHA（安全哈希算法）。\n\n数字证书、加密和认证、消息摘要三个技术结合起来，就是在HTTPS中广泛应用的证书（certificate），证书本身携带了加密/解密的信息，并且可以标识自己的身份，也自带消息摘要。\n#### HTTPS认证过程：\n    1. 浏览器发送一个连接请求给安全服务器。\n    2. 服务器将自己的证书，以及同证书相关的信息发送给客户浏览器。\n    3. 客户浏览器检查服务器送过来的证书是否是由自己信赖的 CA 中心所签发的。如果是，就继续执行协议；如果不是，客户浏览器就给客户一个警告消息：警告客户这个证书不是可以信赖的，询问客户是否需要继续。\n    4. 接着客户浏览器比较证书里的消息，例如域名和公钥，与服务器刚刚发送的相关消息是否一致，如果是一致的，客户浏览器认可这个服务器的合法身份。\n    5. 服务器要求客户发送客户自己的证书。收到后，服务器验证客户的证书，如果没有通过验证，拒绝连接；如果通过验证，服务器获得用户的公钥。\n    6. 客户浏览器告诉服务器自己所能够支持的通讯对称密码方案。\n    7. 服务器从客户发送过来的密码方案中，选择一种加密程度最高的密码方案，用客户的公钥加过密后通知浏览器。\n    8. 浏览器针对这个密码方案，选择一个通话密钥，接着用服务器的公钥加过密后发送给服务器。\n    9. 服务器接收到浏览器送过来的消息，用自己的私钥解密，获得通话密钥。\n    10. 服务器、浏览器接下来的通讯都是用对称密码方案，对称密钥是加过密的。\n\n上面所述的是双向认证 SSL 协议的具体通讯过程，这种情况要求服务器和用户双方都有证书。单向认证 SSL 协议不需要客户拥有 CA 证书，具体的过程相对于上面的步骤，只需将服务器端验证客户证书的过程去掉，以及在协商对称密码方案，对称通话密钥时，服务器发送给客户的是没有加过密的 （这并不影响 SSL 过程的安全性）密码方案。这样，双方具体的通讯内容，就是加过密的数据，如果有第三方攻击，获得的只是加密的数据，第三方要获得有用的信息，就需要对加密 的数据进行解密，这时候的安全就依赖于密码方案的安全。而幸运的是，目前所用的密码方案，只要通讯密钥长度足够的长，就足够的安全。这也是我们强调要求使用128 位加密通讯的原因。\n\n## 二、自认证根证书\n1. 创建根证书密钥文件(自己做CA)root.key：\n    ``` shell\n    $openssl genrsa -des3 -out root.key 2048\n    ```\n    需要输入两次私钥密码            \n    ![](/res/1.png)\n    \n2. 创建根证书的申请文件root.csr：\n    ``` shell\n    $openssl req -new -key root.key -out root.csr\n    ```\n    输入root.key的密码                             \n    ![](/res/2.png)\n\n3. 创建根证书root.crt：\n    ``` shell\n    $openssl x509 -req -days 3650 -sha256 -extensions v3_ca -signkey root.key -in root.csr -out root.crt\n    ```\n    生成根证书                                                        \n    ![](/res/3.png)\n    \n## 三、SSL单向认证\n1. 创建服务器证书秘钥\n    ``` shell\n    $openssl genrsa –des3 -out server.key 2048\n    ```\n    需要输入两次私钥密码                                    \n    ![](/res/4.png)\n    \n2. 去除key口令\n    ``` shell\n    $openssl rsa -in server.key -out server.key\n    ```\n    需要输入私钥密码                                           \n    ![](/res/5.png)\n    \n3. 创建服务器证书申请文件server.csr\n    ``` shell\n    $openssl req -new -key server.key -out server.csr\n    ```\n    \"Common Name\"最好跟网站的域名一致                           \n    ![](/res/6.png)\n    \n4. 创建服务器证书server.crt\n    ``` shell\n    $openssl x509 -req -days 365 -sha256 -extensions v3_req -CA root.crt -CAkey root.key -CAcreateserial -in server.csr -out server.crt\n    ```\n    需要输入根私钥密码                                     \n    ![](/res/7.png)                                          \n\n5. 客户端导入根证书并添加到“信任的根服务站点”                                     \n    ![](/res/8.png)                                   \n    ![](/res/9.png)                               \n    ![](/res/10.png)                       \n    ![](/res/11.png)                            \n    ![](/res/12.png)                           \n    ![](/res/13.png)                                 \n    ![](/res/14.png)                                   \n    ![](/res/15.png)   \n                                          \n6. golang实现简单的https服务器\n\n    ``` Go\n    package main\n    \n    import (\n    \t\"io\"\n    \t\"log\"\n    \t\"net/http\"\n    )\n    \t\n    func handler(w http.ResponseWriter, r *http.Request) {\n    \tio.WriteString(w, \"golang https server\")\n    }\n    \t\n    func main() {\n    \thttp.HandleFunc(\"/\", handler)\n    \tif err := http.ListenAndServeTLS(\":8080\", \"server.crt\", \"server.key\", nil); err != nil {\n    \t\tlog.Fatal(\"ListenAndServe:\", err)\n    \t}\n    }  \n    \n    ```\n    在浏览器中测试\n    ![](/res/16.png)\n        \n## 四、SSL双向认证\n在单向认证的基础上添加客户端证书并在golang服务器源码上添加客户端认证相关代码\n\n1. 创建客户端证书私钥\n    ``` shell\n    $openssl genrsa -des3 -out client.key 2048\n    ```\n    需要输入两次私钥密码\n    ![](/res/17.png)\n    \n2. 去除key口令\n    ``` shell\n    $openssl rsa -in client.key -out client.key\n    ```\n    需要输入私钥密码                                           \n    ![](/res/18.png)\n\t\n3. 创建客户端证书申请文件client.csr\n    ``` shell\n    $openssl req -new -key client.key -out client.csr\n    ```\n    ![](/res/19.png)                                      \n\n4. 创建客户端证书文件client.crt\n    ``` shell\n    $openssl x509 -req -days 365 -sha256 -extensions v3_req -CA root.crt -CAkey root.key -CAcreateserial -in client.csr -out client.crt\n    ```\n    ![](/res/20.png)\n\n5. 将客户端证书文件client.crt和客户端证书密钥文件client.key合并成客户端证书安装包client.pfx\n    ``` shell\n    $openssl pkcs12 -export -in client.crt -inkey client.key -out client.pfx\n    ```\n    设置客户端安装时的密码\n    ![](/res/23.png)\n    \n6. 添加客户端证书\n    参见服务器端添加证书，客户端证书添加到“个人”里面就可以\n    ![](/res/21.png)\n    \n7. 修改服务器代码\n    ``` Go\n    package main\n    \t\n    import (\n    \t\"crypto/tls\"\n    \t\"crypto/x509\"\n    \t\"io\"\n    \t\"io/ioutil\"\n    \t\"log\"\n    \t\"net/http\"\n    )\n    \t\n    type httpsHandler struct {\n    }\n    \t\n    func (*httpsHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n    \tio.WriteString(w, \"golang https server!!!\")\n    }\n    \t\n    func main() {\n    \tpool := x509.NewCertPool()\n    \tcaCertPath := \"root.crt\"\n    \t\n    \tcaCrt, err := ioutil.ReadFile(caCertPath)\n    \tif err != nil {\n    \t\tlog.Fatal(\"ReadFile err:\", err)\n    \t\treturn\n    \t}\n    \tpool.AppendCertsFromPEM(caCrt)\n    \t\n    \ts := &http.Server{\n    \t\tAddr:    \":8080\",\n    \t\tHandler: &httpsHandler{},\n    \t\tTLSConfig: &tls.Config{\n    \t\t\tClientCAs:  pool,\n    \t\t\tClientAuth: tls.RequireAndVerifyClientCert,\n    \t\t},\n    \t}\n    \t\n    \tif err = s.ListenAndServeTLS(\"server.crt\", \"server.key\"); err != nil {\n    \t\tlog.Fatal(\"ListenAndServeTLS err:\", err)\n    \t}\n    }\n    \n    ``` \n\n8. 使用golang访问https服务器\n    ``` Go\n    package main\n    \n    import (\n    \t\"crypto/tls\"\n    \t\"crypto/x509\"\n    \t\"io/ioutil\"\n    \t\"log\"\n    \t\"net/http\"\n    )\n    \t\n    func main() {\n    \tpool := x509.NewCertPool()\n    \tcaCertPath := \"root.crt\"\n    \t\n    \tcaCrt, err := ioutil.ReadFile(caCertPath)\n    \tif err != nil {\n    \t\tlog.Fatal(\"ReadFile err:\", err)\n    \t\treturn\n    \t}\n    \tpool.AppendCertsFromPEM(caCrt)\n    \t\n    \tcliCrt, err := tls.LoadX509KeyPair(\"client.crt\", \"client.key\")\n    \tif err != nil {\n    \t\tlog.Fatal(\"LoadX509KeyPair err:\", err)\n    \t\treturn\n    \t}\n    \t\n    \ttr := &http.Transport{\n    \t\tTLSClientConfig: &tls.Config{\n    \t\t\tRootCAs:      pool,\n    \t\t\tCertificates: []tls.Certificate{cliCrt},\n    \t\t},\n    \t}\n    \tclient := &http.Client{Transport: tr}\n    \tresp, err := client.Get(\"https://localhost:8080\")\n    \tif err != nil {\n    \t\tlog.Fatal(\"client error:\", err)\n    \t\treturn\n    \t}\n    \tdefer resp.Body.Close()\n    \tbody, err := ioutil.ReadAll(resp.Body)\n    \tlog.Println(string(body))\n    }\n    \n    ``` \n \n 在浏览器中测试\n    ![](/res/22.png)\n       \n### 结语\n希望通过这次实例能让大家更好的理解、应用https，谢谢观看。\n相关代码:[go-https](https://github.com/flyingtime/go-https)\n\n\n","source":"_posts/Golang搭建单、双向自认证HTTPS服务器.md","raw":"---\ntitle: Golang搭建单、双向自认证HTTPS服务器\ndate: 2016-10-26 09:25:51\ntags: [golang,https]\ncategories: [golang]\n---\n\n### 前言\n>2015年双11期间淘宝、天猫实现了全站式https安全传输，web安全问题已经成了人们关注的话题，那什么是https呢？如何实现单、双向自认证https服务器呢？接下来我们将一一介绍。\n\n## 一、HTTPS相关概念已经认证流程\n#### 基本概念：\n[**HTTPS**](http://baike.baidu.com/link?url=XuEFqp8HTAIWBO12QMzj54K1iIBGPL6VJGPEn85nyCirdG8LE104hMYvOeDgfucyMf3gu1zPLap3i0BKb-SKHa)（全称：Hyper Text Transfer Protocol over Secure Socket Layer），是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。 它是一个URI scheme（抽象标识符体系），句法类同http:体系。用于安全的HTTP数据传输。https:URL表明它使用了HTTP，但HTTPS存在不同于HTTP的默认端口及一个加密/身份验证层（在HTTP与TCP之间）。这个系统的最初研发由网景公司(Netscape)进行，并内置于其浏览器Netscape Navigator中，提供了身份验证与加密通讯方法。现在它被广泛用于万维网上安全敏感的通讯，例如交易支付方面。关于https详细介绍请见：[大型网站的HTTPS实践](http://studygolang.com/articles/2984)。\n\n**SSL**(Secure Socket Layer)：是Netscape公司设计的主要用于WEB的安全传输协议。从名字就可以看出它在https协议栈中负责实现上面提到的加密层。\n\n**数字证书**：一种文件的名称，好比一个机构或人的签名，能够证明这个机构或人的真实性。其中包含的信息，用于实现上述功能。\n\n**加密和认证**：加密是指通信双方为了防止铭感信息在信道上被第三方窃听而泄漏，将明文通过加密变成密文，如果第三方无法解密的话，就算他获得密文也无能为力；认证是指通信双方为了确认对方是值得信任的消息发送或接受方，而不是使用假身份的非法者，采取的确认身份的方式。只有同时进行了加密和认证才能保证通信的安全，因此在SSL通信协议中这两者都被应。早期一般是用对称加密算法，现在一般都是不对称加密，最常见的算法就是RSA。\n\n**消息摘要**：这个技术主要是为了避免消息被篡改。消息摘要是把一段信息，通过某种算法，得出一串字符串。这个字符串就是消息的摘要。如果消息被篡改（发生了变化），那么摘要也一定会发生变化（如果2个不同的消息生成的摘要是一样的，那么这就叫发生了碰撞）。消息摘要的算法主要有MD5和SHA，在证书领域，一般都是用SHA（安全哈希算法）。\n\n数字证书、加密和认证、消息摘要三个技术结合起来，就是在HTTPS中广泛应用的证书（certificate），证书本身携带了加密/解密的信息，并且可以标识自己的身份，也自带消息摘要。\n#### HTTPS认证过程：\n    1. 浏览器发送一个连接请求给安全服务器。\n    2. 服务器将自己的证书，以及同证书相关的信息发送给客户浏览器。\n    3. 客户浏览器检查服务器送过来的证书是否是由自己信赖的 CA 中心所签发的。如果是，就继续执行协议；如果不是，客户浏览器就给客户一个警告消息：警告客户这个证书不是可以信赖的，询问客户是否需要继续。\n    4. 接着客户浏览器比较证书里的消息，例如域名和公钥，与服务器刚刚发送的相关消息是否一致，如果是一致的，客户浏览器认可这个服务器的合法身份。\n    5. 服务器要求客户发送客户自己的证书。收到后，服务器验证客户的证书，如果没有通过验证，拒绝连接；如果通过验证，服务器获得用户的公钥。\n    6. 客户浏览器告诉服务器自己所能够支持的通讯对称密码方案。\n    7. 服务器从客户发送过来的密码方案中，选择一种加密程度最高的密码方案，用客户的公钥加过密后通知浏览器。\n    8. 浏览器针对这个密码方案，选择一个通话密钥，接着用服务器的公钥加过密后发送给服务器。\n    9. 服务器接收到浏览器送过来的消息，用自己的私钥解密，获得通话密钥。\n    10. 服务器、浏览器接下来的通讯都是用对称密码方案，对称密钥是加过密的。\n\n上面所述的是双向认证 SSL 协议的具体通讯过程，这种情况要求服务器和用户双方都有证书。单向认证 SSL 协议不需要客户拥有 CA 证书，具体的过程相对于上面的步骤，只需将服务器端验证客户证书的过程去掉，以及在协商对称密码方案，对称通话密钥时，服务器发送给客户的是没有加过密的 （这并不影响 SSL 过程的安全性）密码方案。这样，双方具体的通讯内容，就是加过密的数据，如果有第三方攻击，获得的只是加密的数据，第三方要获得有用的信息，就需要对加密 的数据进行解密，这时候的安全就依赖于密码方案的安全。而幸运的是，目前所用的密码方案，只要通讯密钥长度足够的长，就足够的安全。这也是我们强调要求使用128 位加密通讯的原因。\n\n## 二、自认证根证书\n1. 创建根证书密钥文件(自己做CA)root.key：\n    ``` shell\n    $openssl genrsa -des3 -out root.key 2048\n    ```\n    需要输入两次私钥密码            \n    ![](/res/1.png)\n    \n2. 创建根证书的申请文件root.csr：\n    ``` shell\n    $openssl req -new -key root.key -out root.csr\n    ```\n    输入root.key的密码                             \n    ![](/res/2.png)\n\n3. 创建根证书root.crt：\n    ``` shell\n    $openssl x509 -req -days 3650 -sha256 -extensions v3_ca -signkey root.key -in root.csr -out root.crt\n    ```\n    生成根证书                                                        \n    ![](/res/3.png)\n    \n## 三、SSL单向认证\n1. 创建服务器证书秘钥\n    ``` shell\n    $openssl genrsa –des3 -out server.key 2048\n    ```\n    需要输入两次私钥密码                                    \n    ![](/res/4.png)\n    \n2. 去除key口令\n    ``` shell\n    $openssl rsa -in server.key -out server.key\n    ```\n    需要输入私钥密码                                           \n    ![](/res/5.png)\n    \n3. 创建服务器证书申请文件server.csr\n    ``` shell\n    $openssl req -new -key server.key -out server.csr\n    ```\n    \"Common Name\"最好跟网站的域名一致                           \n    ![](/res/6.png)\n    \n4. 创建服务器证书server.crt\n    ``` shell\n    $openssl x509 -req -days 365 -sha256 -extensions v3_req -CA root.crt -CAkey root.key -CAcreateserial -in server.csr -out server.crt\n    ```\n    需要输入根私钥密码                                     \n    ![](/res/7.png)                                          \n\n5. 客户端导入根证书并添加到“信任的根服务站点”                                     \n    ![](/res/8.png)                                   \n    ![](/res/9.png)                               \n    ![](/res/10.png)                       \n    ![](/res/11.png)                            \n    ![](/res/12.png)                           \n    ![](/res/13.png)                                 \n    ![](/res/14.png)                                   \n    ![](/res/15.png)   \n                                          \n6. golang实现简单的https服务器\n\n    ``` Go\n    package main\n    \n    import (\n    \t\"io\"\n    \t\"log\"\n    \t\"net/http\"\n    )\n    \t\n    func handler(w http.ResponseWriter, r *http.Request) {\n    \tio.WriteString(w, \"golang https server\")\n    }\n    \t\n    func main() {\n    \thttp.HandleFunc(\"/\", handler)\n    \tif err := http.ListenAndServeTLS(\":8080\", \"server.crt\", \"server.key\", nil); err != nil {\n    \t\tlog.Fatal(\"ListenAndServe:\", err)\n    \t}\n    }  \n    \n    ```\n    在浏览器中测试\n    ![](/res/16.png)\n        \n## 四、SSL双向认证\n在单向认证的基础上添加客户端证书并在golang服务器源码上添加客户端认证相关代码\n\n1. 创建客户端证书私钥\n    ``` shell\n    $openssl genrsa -des3 -out client.key 2048\n    ```\n    需要输入两次私钥密码\n    ![](/res/17.png)\n    \n2. 去除key口令\n    ``` shell\n    $openssl rsa -in client.key -out client.key\n    ```\n    需要输入私钥密码                                           \n    ![](/res/18.png)\n\t\n3. 创建客户端证书申请文件client.csr\n    ``` shell\n    $openssl req -new -key client.key -out client.csr\n    ```\n    ![](/res/19.png)                                      \n\n4. 创建客户端证书文件client.crt\n    ``` shell\n    $openssl x509 -req -days 365 -sha256 -extensions v3_req -CA root.crt -CAkey root.key -CAcreateserial -in client.csr -out client.crt\n    ```\n    ![](/res/20.png)\n\n5. 将客户端证书文件client.crt和客户端证书密钥文件client.key合并成客户端证书安装包client.pfx\n    ``` shell\n    $openssl pkcs12 -export -in client.crt -inkey client.key -out client.pfx\n    ```\n    设置客户端安装时的密码\n    ![](/res/23.png)\n    \n6. 添加客户端证书\n    参见服务器端添加证书，客户端证书添加到“个人”里面就可以\n    ![](/res/21.png)\n    \n7. 修改服务器代码\n    ``` Go\n    package main\n    \t\n    import (\n    \t\"crypto/tls\"\n    \t\"crypto/x509\"\n    \t\"io\"\n    \t\"io/ioutil\"\n    \t\"log\"\n    \t\"net/http\"\n    )\n    \t\n    type httpsHandler struct {\n    }\n    \t\n    func (*httpsHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n    \tio.WriteString(w, \"golang https server!!!\")\n    }\n    \t\n    func main() {\n    \tpool := x509.NewCertPool()\n    \tcaCertPath := \"root.crt\"\n    \t\n    \tcaCrt, err := ioutil.ReadFile(caCertPath)\n    \tif err != nil {\n    \t\tlog.Fatal(\"ReadFile err:\", err)\n    \t\treturn\n    \t}\n    \tpool.AppendCertsFromPEM(caCrt)\n    \t\n    \ts := &http.Server{\n    \t\tAddr:    \":8080\",\n    \t\tHandler: &httpsHandler{},\n    \t\tTLSConfig: &tls.Config{\n    \t\t\tClientCAs:  pool,\n    \t\t\tClientAuth: tls.RequireAndVerifyClientCert,\n    \t\t},\n    \t}\n    \t\n    \tif err = s.ListenAndServeTLS(\"server.crt\", \"server.key\"); err != nil {\n    \t\tlog.Fatal(\"ListenAndServeTLS err:\", err)\n    \t}\n    }\n    \n    ``` \n\n8. 使用golang访问https服务器\n    ``` Go\n    package main\n    \n    import (\n    \t\"crypto/tls\"\n    \t\"crypto/x509\"\n    \t\"io/ioutil\"\n    \t\"log\"\n    \t\"net/http\"\n    )\n    \t\n    func main() {\n    \tpool := x509.NewCertPool()\n    \tcaCertPath := \"root.crt\"\n    \t\n    \tcaCrt, err := ioutil.ReadFile(caCertPath)\n    \tif err != nil {\n    \t\tlog.Fatal(\"ReadFile err:\", err)\n    \t\treturn\n    \t}\n    \tpool.AppendCertsFromPEM(caCrt)\n    \t\n    \tcliCrt, err := tls.LoadX509KeyPair(\"client.crt\", \"client.key\")\n    \tif err != nil {\n    \t\tlog.Fatal(\"LoadX509KeyPair err:\", err)\n    \t\treturn\n    \t}\n    \t\n    \ttr := &http.Transport{\n    \t\tTLSClientConfig: &tls.Config{\n    \t\t\tRootCAs:      pool,\n    \t\t\tCertificates: []tls.Certificate{cliCrt},\n    \t\t},\n    \t}\n    \tclient := &http.Client{Transport: tr}\n    \tresp, err := client.Get(\"https://localhost:8080\")\n    \tif err != nil {\n    \t\tlog.Fatal(\"client error:\", err)\n    \t\treturn\n    \t}\n    \tdefer resp.Body.Close()\n    \tbody, err := ioutil.ReadAll(resp.Body)\n    \tlog.Println(string(body))\n    }\n    \n    ``` \n \n 在浏览器中测试\n    ![](/res/22.png)\n       \n### 结语\n希望通过这次实例能让大家更好的理解、应用https，谢谢观看。\n相关代码:[go-https](https://github.com/flyingtime/go-https)\n\n\n","slug":"Golang搭建单、双向自认证HTTPS服务器","published":1,"updated":"2016-10-27T07:00:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciusgcbkm0000c80an83jzfow","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<p>2015年双11期间淘宝、天猫实现了全站式https安全传输，web安全问题已经成了人们关注的话题，那什么是https呢？如何实现单、双向自认证https服务器呢？接下来我们将一一介绍。</p>\n</blockquote>\n<h2 id=\"一、HTTPS相关概念已经认证流程\"><a href=\"#一、HTTPS相关概念已经认证流程\" class=\"headerlink\" title=\"一、HTTPS相关概念已经认证流程\"></a>一、HTTPS相关概念已经认证流程</h2><h4 id=\"基本概念：\"><a href=\"#基本概念：\" class=\"headerlink\" title=\"基本概念：\"></a>基本概念：</h4><p><a href=\"http://baike.baidu.com/link?url=XuEFqp8HTAIWBO12QMzj54K1iIBGPL6VJGPEn85nyCirdG8LE104hMYvOeDgfucyMf3gu1zPLap3i0BKb-SKHa\" target=\"_blank\" rel=\"external\"><strong>HTTPS</strong></a>（全称：Hyper Text Transfer Protocol over Secure Socket Layer），是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。 它是一个URI scheme（抽象标识符体系），句法类同http:体系。用于安全的HTTP数据传输。https:URL表明它使用了HTTP，但HTTPS存在不同于HTTP的默认端口及一个加密/身份验证层（在HTTP与TCP之间）。这个系统的最初研发由网景公司(Netscape)进行，并内置于其浏览器Netscape Navigator中，提供了身份验证与加密通讯方法。现在它被广泛用于万维网上安全敏感的通讯，例如交易支付方面。关于https详细介绍请见：<a href=\"http://studygolang.com/articles/2984\" target=\"_blank\" rel=\"external\">大型网站的HTTPS实践</a>。</p>\n<p><strong>SSL</strong>(Secure Socket Layer)：是Netscape公司设计的主要用于WEB的安全传输协议。从名字就可以看出它在https协议栈中负责实现上面提到的加密层。</p>\n<p><strong>数字证书</strong>：一种文件的名称，好比一个机构或人的签名，能够证明这个机构或人的真实性。其中包含的信息，用于实现上述功能。</p>\n<p><strong>加密和认证</strong>：加密是指通信双方为了防止铭感信息在信道上被第三方窃听而泄漏，将明文通过加密变成密文，如果第三方无法解密的话，就算他获得密文也无能为力；认证是指通信双方为了确认对方是值得信任的消息发送或接受方，而不是使用假身份的非法者，采取的确认身份的方式。只有同时进行了加密和认证才能保证通信的安全，因此在SSL通信协议中这两者都被应。早期一般是用对称加密算法，现在一般都是不对称加密，最常见的算法就是RSA。</p>\n<p><strong>消息摘要</strong>：这个技术主要是为了避免消息被篡改。消息摘要是把一段信息，通过某种算法，得出一串字符串。这个字符串就是消息的摘要。如果消息被篡改（发生了变化），那么摘要也一定会发生变化（如果2个不同的消息生成的摘要是一样的，那么这就叫发生了碰撞）。消息摘要的算法主要有MD5和SHA，在证书领域，一般都是用SHA（安全哈希算法）。</p>\n<p>数字证书、加密和认证、消息摘要三个技术结合起来，就是在HTTPS中广泛应用的证书（certificate），证书本身携带了加密/解密的信息，并且可以标识自己的身份，也自带消息摘要。</p>\n<h4 id=\"HTTPS认证过程：\"><a href=\"#HTTPS认证过程：\" class=\"headerlink\" title=\"HTTPS认证过程：\"></a>HTTPS认证过程：</h4><pre><code>1. 浏览器发送一个连接请求给安全服务器。\n2. 服务器将自己的证书，以及同证书相关的信息发送给客户浏览器。\n3. 客户浏览器检查服务器送过来的证书是否是由自己信赖的 CA 中心所签发的。如果是，就继续执行协议；如果不是，客户浏览器就给客户一个警告消息：警告客户这个证书不是可以信赖的，询问客户是否需要继续。\n4. 接着客户浏览器比较证书里的消息，例如域名和公钥，与服务器刚刚发送的相关消息是否一致，如果是一致的，客户浏览器认可这个服务器的合法身份。\n5. 服务器要求客户发送客户自己的证书。收到后，服务器验证客户的证书，如果没有通过验证，拒绝连接；如果通过验证，服务器获得用户的公钥。\n6. 客户浏览器告诉服务器自己所能够支持的通讯对称密码方案。\n7. 服务器从客户发送过来的密码方案中，选择一种加密程度最高的密码方案，用客户的公钥加过密后通知浏览器。\n8. 浏览器针对这个密码方案，选择一个通话密钥，接着用服务器的公钥加过密后发送给服务器。\n9. 服务器接收到浏览器送过来的消息，用自己的私钥解密，获得通话密钥。\n10. 服务器、浏览器接下来的通讯都是用对称密码方案，对称密钥是加过密的。\n</code></pre><p>上面所述的是双向认证 SSL 协议的具体通讯过程，这种情况要求服务器和用户双方都有证书。单向认证 SSL 协议不需要客户拥有 CA 证书，具体的过程相对于上面的步骤，只需将服务器端验证客户证书的过程去掉，以及在协商对称密码方案，对称通话密钥时，服务器发送给客户的是没有加过密的 （这并不影响 SSL 过程的安全性）密码方案。这样，双方具体的通讯内容，就是加过密的数据，如果有第三方攻击，获得的只是加密的数据，第三方要获得有用的信息，就需要对加密 的数据进行解密，这时候的安全就依赖于密码方案的安全。而幸运的是，目前所用的密码方案，只要通讯密钥长度足够的长，就足够的安全。这也是我们强调要求使用128 位加密通讯的原因。</p>\n<h2 id=\"二、自认证根证书\"><a href=\"#二、自认证根证书\" class=\"headerlink\" title=\"二、自认证根证书\"></a>二、自认证根证书</h2><ol>\n<li><p>创建根证书密钥文件(自己做CA)root.key：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$openssl genrsa -des3 -out root.key 2048</div></pre></td></tr></table></figure>\n<p> 需要输入两次私钥密码<br> <img src=\"/res/1.png\" alt=\"\"></p>\n</li>\n<li><p>创建根证书的申请文件root.csr：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$openssl req -new -key root.key -out root.csr</div></pre></td></tr></table></figure>\n<p> 输入root.key的密码<br> <img src=\"/res/2.png\" alt=\"\"></p>\n</li>\n<li><p>创建根证书root.crt：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$openssl x509 -req -days 3650 -sha256 -extensions v3_ca -signkey root.key -in root.csr -out root.crt</div></pre></td></tr></table></figure>\n<p> 生成根证书<br> <img src=\"/res/3.png\" alt=\"\"></p>\n</li>\n</ol>\n<h2 id=\"三、SSL单向认证\"><a href=\"#三、SSL单向认证\" class=\"headerlink\" title=\"三、SSL单向认证\"></a>三、SSL单向认证</h2><ol>\n<li><p>创建服务器证书秘钥</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$openssl genrsa –des3 -out server.key 2048</div></pre></td></tr></table></figure>\n<p> 需要输入两次私钥密码<br> <img src=\"/res/4.png\" alt=\"\"></p>\n</li>\n<li><p>去除key口令</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$openssl rsa -in server.key -out server.key</div></pre></td></tr></table></figure>\n<p> 需要输入私钥密码<br> <img src=\"/res/5.png\" alt=\"\"></p>\n</li>\n<li><p>创建服务器证书申请文件server.csr</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$openssl req -new -key server.key -out server.csr</div></pre></td></tr></table></figure>\n<p> “Common Name”最好跟网站的域名一致<br> <img src=\"/res/6.png\" alt=\"\"></p>\n</li>\n<li><p>创建服务器证书server.crt</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$openssl x509 -req -days 365 -sha256 -extensions v3_req -CA root.crt -CAkey root.key -CAcreateserial -in server.csr -out server.crt</div></pre></td></tr></table></figure>\n<p> 需要输入根私钥密码<br> <img src=\"/res/7.png\" alt=\"\">                                          </p>\n</li>\n<li><p>客户端导入根证书并添加到“信任的根服务站点”<br> <img src=\"/res/8.png\" alt=\"\"><br> <img src=\"/res/9.png\" alt=\"\"><br> <img src=\"/res/10.png\" alt=\"\"><br> <img src=\"/res/11.png\" alt=\"\"><br> <img src=\"/res/12.png\" alt=\"\"><br> <img src=\"/res/13.png\" alt=\"\"><br> <img src=\"/res/14.png\" alt=\"\"><br> <img src=\"/res/15.png\" alt=\"\">   </p>\n</li>\n<li><p>golang实现简单的https服务器</p>\n <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\t<span class=\"string\">\"io\"</span></div><div class=\"line\">\t<span class=\"string\">\"log\"</span></div><div class=\"line\">\t<span class=\"string\">\"net/http\"</span></div><div class=\"line\">)</div><div class=\"line\">\t</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">handler</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class=\"line\">\tio.WriteString(w, <span class=\"string\">\"golang https server\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\">\t</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\thttp.HandleFunc(<span class=\"string\">\"/\"</span>, handler)</div><div class=\"line\">\t<span class=\"keyword\">if</span> err := http.ListenAndServeTLS(<span class=\"string\">\":8080\"</span>, <span class=\"string\">\"server.crt\"</span>, <span class=\"string\">\"server.key\"</span>, <span class=\"literal\">nil</span>); err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\tlog.Fatal(<span class=\"string\">\"ListenAndServe:\"</span>, err)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> 在浏览器中测试<br> <img src=\"/res/16.png\" alt=\"\"></p>\n</li>\n</ol>\n<h2 id=\"四、SSL双向认证\"><a href=\"#四、SSL双向认证\" class=\"headerlink\" title=\"四、SSL双向认证\"></a>四、SSL双向认证</h2><p>在单向认证的基础上添加客户端证书并在golang服务器源码上添加客户端认证相关代码</p>\n<ol>\n<li><p>创建客户端证书私钥</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$openssl genrsa -des3 -out client.key 2048</div></pre></td></tr></table></figure>\n<p> 需要输入两次私钥密码<br> <img src=\"/res/17.png\" alt=\"\"></p>\n</li>\n<li><p>去除key口令</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$openssl rsa -in client.key -out client.key</div></pre></td></tr></table></figure>\n<p> 需要输入私钥密码<br> <img src=\"/res/18.png\" alt=\"\"></p>\n</li>\n<li><p>创建客户端证书申请文件client.csr</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$openssl req -new -key client.key -out client.csr</div></pre></td></tr></table></figure>\n<p> <img src=\"/res/19.png\" alt=\"\">                                      </p>\n</li>\n<li><p>创建客户端证书文件client.crt</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$openssl x509 -req -days 365 -sha256 -extensions v3_req -CA root.crt -CAkey root.key -CAcreateserial -in client.csr -out client.crt</div></pre></td></tr></table></figure>\n<p> <img src=\"/res/20.png\" alt=\"\"></p>\n</li>\n<li><p>将客户端证书文件client.crt和客户端证书密钥文件client.key合并成客户端证书安装包client.pfx</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$openssl pkcs12 -export -in client.crt -inkey client.key -out client.pfx</div></pre></td></tr></table></figure>\n<p> 设置客户端安装时的密码<br> <img src=\"/res/23.png\" alt=\"\"></p>\n</li>\n<li><p>添加客户端证书<br> 参见服务器端添加证书，客户端证书添加到“个人”里面就可以<br> <img src=\"/res/21.png\" alt=\"\"></p>\n</li>\n<li><p>修改服务器代码</p>\n<pre><code class=\"Go\"><span class=\"keyword\">package</span> main\n\n<span class=\"keyword\">import</span> (\n    <span class=\"string\">\"crypto/tls\"</span>\n    <span class=\"string\">\"crypto/x509\"</span>\n    <span class=\"string\">\"io\"</span>\n    <span class=\"string\">\"io/ioutil\"</span>\n    <span class=\"string\">\"log\"</span>\n    <span class=\"string\">\"net/http\"</span>\n)\n\n<span class=\"keyword\">type</span> httpsHandler <span class=\"keyword\">struct</span> {\n}\n\n<span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(*httpsHandler)</span> <span class=\"title\">ServeHTTP</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> {\n    io.WriteString(w, <span class=\"string\">\"golang https server!!!\"</span>)\n}\n\n<span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> {\n    pool := x509.NewCertPool()\n    caCertPath := <span class=\"string\">\"root.crt\"</span>\n\n    caCrt, err := ioutil.ReadFile(caCertPath)\n    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> {\n        log.Fatal(<span class=\"string\">\"ReadFile err:\"</span>, err)\n        <span class=\"keyword\">return</span>\n    }\n    pool.AppendCertsFromPEM(caCrt)\n\n    s := &amp;http.Server{\n        Addr:    <span class=\"string\">\":8080\"</span>,\n        Handler: &amp;httpsHandler{},\n        TLSConfig: &amp;tls.Config{\n            ClientCAs:  pool,\n            ClientAuth: tls.RequireAndVerifyClientCert,\n        },\n    }\n\n    <span class=\"keyword\">if</span> err = s.ListenAndServeTLS(<span class=\"string\">\"server.crt\"</span>, <span class=\"string\">\"server.key\"</span>); err != <span class=\"literal\">nil</span> {\n        log.Fatal(<span class=\"string\">\"ListenAndServeTLS err:\"</span>, err)\n    }\n}\n</code></pre>\n</li>\n<li><p>使用golang访问https服务器</p>\n<pre><code class=\"Go\"><span class=\"keyword\">package</span> main\n\n<span class=\"keyword\">import</span> (\n    <span class=\"string\">\"crypto/tls\"</span>\n    <span class=\"string\">\"crypto/x509\"</span>\n    <span class=\"string\">\"io/ioutil\"</span>\n    <span class=\"string\">\"log\"</span>\n    <span class=\"string\">\"net/http\"</span>\n)\n\n<span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> {\n    pool := x509.NewCertPool()\n    caCertPath := <span class=\"string\">\"root.crt\"</span>\n\n    caCrt, err := ioutil.ReadFile(caCertPath)\n    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> {\n        log.Fatal(<span class=\"string\">\"ReadFile err:\"</span>, err)\n        <span class=\"keyword\">return</span>\n    }\n    pool.AppendCertsFromPEM(caCrt)\n\n    cliCrt, err := tls.LoadX509KeyPair(<span class=\"string\">\"client.crt\"</span>, <span class=\"string\">\"client.key\"</span>)\n    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> {\n        log.Fatal(<span class=\"string\">\"LoadX509KeyPair err:\"</span>, err)\n        <span class=\"keyword\">return</span>\n    }\n\n    tr := &amp;http.Transport{\n        TLSClientConfig: &amp;tls.Config{\n            RootCAs:      pool,\n            Certificates: []tls.Certificate{cliCrt},\n        },\n    }\n    client := &amp;http.Client{Transport: tr}\n    resp, err := client.Get(<span class=\"string\">\"https://localhost:8080\"</span>)\n    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> {\n        log.Fatal(<span class=\"string\">\"client error:\"</span>, err)\n        <span class=\"keyword\">return</span>\n    }\n    <span class=\"keyword\">defer</span> resp.Body.Close()\n    body, err := ioutil.ReadAll(resp.Body)\n    log.Println(<span class=\"keyword\">string</span>(body))\n}\n</code></pre>\n<p>在浏览器中测试<br> <img src=\"/res/22.png\" alt=\"\"></p>\n</li>\n</ol>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3><p>希望通过这次实例能让大家更好的理解、应用https，谢谢观看。<br>相关代码:<a href=\"https://github.com/flyingtime/go-https\" target=\"_blank\" rel=\"external\">go-https</a></p>\n","excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<p>2015年双11期间淘宝、天猫实现了全站式https安全传输，web安全问题已经成了人们关注的话题，那什么是https呢？如何实现单、双向自认证https服务器呢？接下来我们将一一介绍。</p>\n</blockquote>\n<h2 id=\"一、HTTPS相关概念已经认证流程\"><a href=\"#一、HTTPS相关概念已经认证流程\" class=\"headerlink\" title=\"一、HTTPS相关概念已经认证流程\"></a>一、HTTPS相关概念已经认证流程</h2><h4 id=\"基本概念：\"><a href=\"#基本概念：\" class=\"headerlink\" title=\"基本概念：\"></a>基本概念：</h4><p><a href=\"http://baike.baidu.com/link?url=XuEFqp8HTAIWBO12QMzj54K1iIBGPL6VJGPEn85nyCirdG8LE104hMYvOeDgfucyMf3gu1zPLap3i0BKb-SKHa\"><strong>HTTPS</strong></a>（全称：Hyper Text Transfer Protocol over Secure Socket Layer），是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。 它是一个URI scheme（抽象标识符体系），句法类同http:体系。用于安全的HTTP数据传输。https:URL表明它使用了HTTP，但HTTPS存在不同于HTTP的默认端口及一个加密/身份验证层（在HTTP与TCP之间）。这个系统的最初研发由网景公司(Netscape)进行，并内置于其浏览器Netscape Navigator中，提供了身份验证与加密通讯方法。现在它被广泛用于万维网上安全敏感的通讯，例如交易支付方面。关于https详细介绍请见：<a href=\"http://studygolang.com/articles/2984\">大型网站的HTTPS实践</a>。</p>\n<p><strong>SSL</strong>(Secure Socket Layer)：是Netscape公司设计的主要用于WEB的安全传输协议。从名字就可以看出它在https协议栈中负责实现上面提到的加密层。</p>\n<p><strong>数字证书</strong>：一种文件的名称，好比一个机构或人的签名，能够证明这个机构或人的真实性。其中包含的信息，用于实现上述功能。</p>\n<p><strong>加密和认证</strong>：加密是指通信双方为了防止铭感信息在信道上被第三方窃听而泄漏，将明文通过加密变成密文，如果第三方无法解密的话，就算他获得密文也无能为力；认证是指通信双方为了确认对方是值得信任的消息发送或接受方，而不是使用假身份的非法者，采取的确认身份的方式。只有同时进行了加密和认证才能保证通信的安全，因此在SSL通信协议中这两者都被应。早期一般是用对称加密算法，现在一般都是不对称加密，最常见的算法就是RSA。</p>\n<p><strong>消息摘要</strong>：这个技术主要是为了避免消息被篡改。消息摘要是把一段信息，通过某种算法，得出一串字符串。这个字符串就是消息的摘要。如果消息被篡改（发生了变化），那么摘要也一定会发生变化（如果2个不同的消息生成的摘要是一样的，那么这就叫发生了碰撞）。消息摘要的算法主要有MD5和SHA，在证书领域，一般都是用SHA（安全哈希算法）。</p>\n<p>数字证书、加密和认证、消息摘要三个技术结合起来，就是在HTTPS中广泛应用的证书（certificate），证书本身携带了加密/解密的信息，并且可以标识自己的身份，也自带消息摘要。</p>\n<h4 id=\"HTTPS认证过程：\"><a href=\"#HTTPS认证过程：\" class=\"headerlink\" title=\"HTTPS认证过程：\"></a>HTTPS认证过程：</h4><pre><code>1. 浏览器发送一个连接请求给安全服务器。\n2. 服务器将自己的证书，以及同证书相关的信息发送给客户浏览器。\n3. 客户浏览器检查服务器送过来的证书是否是由自己信赖的 CA 中心所签发的。如果是，就继续执行协议；如果不是，客户浏览器就给客户一个警告消息：警告客户这个证书不是可以信赖的，询问客户是否需要继续。\n4. 接着客户浏览器比较证书里的消息，例如域名和公钥，与服务器刚刚发送的相关消息是否一致，如果是一致的，客户浏览器认可这个服务器的合法身份。\n5. 服务器要求客户发送客户自己的证书。收到后，服务器验证客户的证书，如果没有通过验证，拒绝连接；如果通过验证，服务器获得用户的公钥。\n6. 客户浏览器告诉服务器自己所能够支持的通讯对称密码方案。\n7. 服务器从客户发送过来的密码方案中，选择一种加密程度最高的密码方案，用客户的公钥加过密后通知浏览器。\n8. 浏览器针对这个密码方案，选择一个通话密钥，接着用服务器的公钥加过密后发送给服务器。\n9. 服务器接收到浏览器送过来的消息，用自己的私钥解密，获得通话密钥。\n10. 服务器、浏览器接下来的通讯都是用对称密码方案，对称密钥是加过密的。\n</code></pre><p>上面所述的是双向认证 SSL 协议的具体通讯过程，这种情况要求服务器和用户双方都有证书。单向认证 SSL 协议不需要客户拥有 CA 证书，具体的过程相对于上面的步骤，只需将服务器端验证客户证书的过程去掉，以及在协商对称密码方案，对称通话密钥时，服务器发送给客户的是没有加过密的 （这并不影响 SSL 过程的安全性）密码方案。这样，双方具体的通讯内容，就是加过密的数据，如果有第三方攻击，获得的只是加密的数据，第三方要获得有用的信息，就需要对加密 的数据进行解密，这时候的安全就依赖于密码方案的安全。而幸运的是，目前所用的密码方案，只要通讯密钥长度足够的长，就足够的安全。这也是我们强调要求使用128 位加密通讯的原因。</p>\n<h2 id=\"二、自认证根证书\"><a href=\"#二、自认证根证书\" class=\"headerlink\" title=\"二、自认证根证书\"></a>二、自认证根证书</h2><ol>\n<li><p>创建根证书密钥文件(自己做CA)root.key：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$openssl genrsa -des3 -out root.key 2048</div></pre></td></tr></table></figure>\n<p> 需要输入两次私钥密码<br> <img src=\"/res/1.png\" alt=\"\"></p>\n</li>\n<li><p>创建根证书的申请文件root.csr：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$openssl req -new -key root.key -out root.csr</div></pre></td></tr></table></figure>\n<p> 输入root.key的密码<br> <img src=\"/res/2.png\" alt=\"\"></p>\n</li>\n<li><p>创建根证书root.crt：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$openssl x509 -req -days 3650 -sha256 -extensions v3_ca -signkey root.key -in root.csr -out root.crt</div></pre></td></tr></table></figure>\n<p> 生成根证书<br> <img src=\"/res/3.png\" alt=\"\"></p>\n</li>\n</ol>\n<h2 id=\"三、SSL单向认证\"><a href=\"#三、SSL单向认证\" class=\"headerlink\" title=\"三、SSL单向认证\"></a>三、SSL单向认证</h2><ol>\n<li><p>创建服务器证书秘钥</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$openssl genrsa –des3 -out server.key 2048</div></pre></td></tr></table></figure>\n<p> 需要输入两次私钥密码<br> <img src=\"/res/4.png\" alt=\"\"></p>\n</li>\n<li><p>去除key口令</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$openssl rsa -in server.key -out server.key</div></pre></td></tr></table></figure>\n<p> 需要输入私钥密码<br> <img src=\"/res/5.png\" alt=\"\"></p>\n</li>\n<li><p>创建服务器证书申请文件server.csr</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$openssl req -new -key server.key -out server.csr</div></pre></td></tr></table></figure>\n<p> “Common Name”最好跟网站的域名一致<br> <img src=\"/res/6.png\" alt=\"\"></p>\n</li>\n<li><p>创建服务器证书server.crt</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$openssl x509 -req -days 365 -sha256 -extensions v3_req -CA root.crt -CAkey root.key -CAcreateserial -in server.csr -out server.crt</div></pre></td></tr></table></figure>\n<p> 需要输入根私钥密码<br> <img src=\"/res/7.png\" alt=\"\">                                          </p>\n</li>\n<li><p>客户端导入根证书并添加到“信任的根服务站点”<br> <img src=\"/res/8.png\" alt=\"\"><br> <img src=\"/res/9.png\" alt=\"\"><br> <img src=\"/res/10.png\" alt=\"\"><br> <img src=\"/res/11.png\" alt=\"\"><br> <img src=\"/res/12.png\" alt=\"\"><br> <img src=\"/res/13.png\" alt=\"\"><br> <img src=\"/res/14.png\" alt=\"\"><br> <img src=\"/res/15.png\" alt=\"\">   </p>\n</li>\n<li><p>golang实现简单的https服务器</p>\n <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\t<span class=\"string\">\"io\"</span></div><div class=\"line\">\t<span class=\"string\">\"log\"</span></div><div class=\"line\">\t<span class=\"string\">\"net/http\"</span></div><div class=\"line\">)</div><div class=\"line\">\t</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">handler</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class=\"line\">\tio.WriteString(w, <span class=\"string\">\"golang https server\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\">\t</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\thttp.HandleFunc(<span class=\"string\">\"/\"</span>, handler)</div><div class=\"line\">\t<span class=\"keyword\">if</span> err := http.ListenAndServeTLS(<span class=\"string\">\":8080\"</span>, <span class=\"string\">\"server.crt\"</span>, <span class=\"string\">\"server.key\"</span>, <span class=\"literal\">nil</span>); err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\tlog.Fatal(<span class=\"string\">\"ListenAndServe:\"</span>, err)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> 在浏览器中测试<br> <img src=\"/res/16.png\" alt=\"\"></p>\n</li>\n</ol>\n<h2 id=\"四、SSL双向认证\"><a href=\"#四、SSL双向认证\" class=\"headerlink\" title=\"四、SSL双向认证\"></a>四、SSL双向认证</h2><p>在单向认证的基础上添加客户端证书并在golang服务器源码上添加客户端认证相关代码</p>\n<ol>\n<li><p>创建客户端证书私钥</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$openssl genrsa -des3 -out client.key 2048</div></pre></td></tr></table></figure>\n<p> 需要输入两次私钥密码<br> <img src=\"/res/17.png\" alt=\"\"></p>\n</li>\n<li><p>去除key口令</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$openssl rsa -in client.key -out client.key</div></pre></td></tr></table></figure>\n<p> 需要输入私钥密码<br> <img src=\"/res/18.png\" alt=\"\"></p>\n</li>\n<li><p>创建客户端证书申请文件client.csr</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$openssl req -new -key client.key -out client.csr</div></pre></td></tr></table></figure>\n<p> <img src=\"/res/19.png\" alt=\"\">                                      </p>\n</li>\n<li><p>创建客户端证书文件client.crt</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$openssl x509 -req -days 365 -sha256 -extensions v3_req -CA root.crt -CAkey root.key -CAcreateserial -in client.csr -out client.crt</div></pre></td></tr></table></figure>\n<p> <img src=\"/res/20.png\" alt=\"\"></p>\n</li>\n<li><p>将客户端证书文件client.crt和客户端证书密钥文件client.key合并成客户端证书安装包client.pfx</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$openssl pkcs12 -export -in client.crt -inkey client.key -out client.pfx</div></pre></td></tr></table></figure>\n<p> 设置客户端安装时的密码<br> <img src=\"/res/23.png\" alt=\"\"></p>\n</li>\n<li><p>添加客户端证书<br> 参见服务器端添加证书，客户端证书添加到“个人”里面就可以<br> <img src=\"/res/21.png\" alt=\"\"></p>\n</li>\n<li><p>修改服务器代码</p>\n<pre><code class=\"Go\"><span class=\"keyword\">package</span> main\n\n<span class=\"keyword\">import</span> (\n    <span class=\"string\">\"crypto/tls\"</span>\n    <span class=\"string\">\"crypto/x509\"</span>\n    <span class=\"string\">\"io\"</span>\n    <span class=\"string\">\"io/ioutil\"</span>\n    <span class=\"string\">\"log\"</span>\n    <span class=\"string\">\"net/http\"</span>\n)\n\n<span class=\"keyword\">type</span> httpsHandler <span class=\"keyword\">struct</span> {\n}\n\n<span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(*httpsHandler)</span> <span class=\"title\">ServeHTTP</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> {\n    io.WriteString(w, <span class=\"string\">\"golang https server!!!\"</span>)\n}\n\n<span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> {\n    pool := x509.NewCertPool()\n    caCertPath := <span class=\"string\">\"root.crt\"</span>\n\n    caCrt, err := ioutil.ReadFile(caCertPath)\n    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> {\n        log.Fatal(<span class=\"string\">\"ReadFile err:\"</span>, err)\n        <span class=\"keyword\">return</span>\n    }\n    pool.AppendCertsFromPEM(caCrt)\n\n    s := &amp;http.Server{\n        Addr:    <span class=\"string\">\":8080\"</span>,\n        Handler: &amp;httpsHandler{},\n        TLSConfig: &amp;tls.Config{\n            ClientCAs:  pool,\n            ClientAuth: tls.RequireAndVerifyClientCert,\n        },\n    }\n\n    <span class=\"keyword\">if</span> err = s.ListenAndServeTLS(<span class=\"string\">\"server.crt\"</span>, <span class=\"string\">\"server.key\"</span>); err != <span class=\"literal\">nil</span> {\n        log.Fatal(<span class=\"string\">\"ListenAndServeTLS err:\"</span>, err)\n    }\n}\n</code></pre>\n</li>\n<li><p>使用golang访问https服务器</p>\n<pre><code class=\"Go\"><span class=\"keyword\">package</span> main\n\n<span class=\"keyword\">import</span> (\n    <span class=\"string\">\"crypto/tls\"</span>\n    <span class=\"string\">\"crypto/x509\"</span>\n    <span class=\"string\">\"io/ioutil\"</span>\n    <span class=\"string\">\"log\"</span>\n    <span class=\"string\">\"net/http\"</span>\n)\n\n<span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> {\n    pool := x509.NewCertPool()\n    caCertPath := <span class=\"string\">\"root.crt\"</span>\n\n    caCrt, err := ioutil.ReadFile(caCertPath)\n    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> {\n        log.Fatal(<span class=\"string\">\"ReadFile err:\"</span>, err)\n        <span class=\"keyword\">return</span>\n    }\n    pool.AppendCertsFromPEM(caCrt)\n\n    cliCrt, err := tls.LoadX509KeyPair(<span class=\"string\">\"client.crt\"</span>, <span class=\"string\">\"client.key\"</span>)\n    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> {\n        log.Fatal(<span class=\"string\">\"LoadX509KeyPair err:\"</span>, err)\n        <span class=\"keyword\">return</span>\n    }\n\n    tr := &amp;http.Transport{\n        TLSClientConfig: &amp;tls.Config{\n            RootCAs:      pool,\n            Certificates: []tls.Certificate{cliCrt},\n        },\n    }\n    client := &amp;http.Client{Transport: tr}\n    resp, err := client.Get(<span class=\"string\">\"https://localhost:8080\"</span>)\n    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> {\n        log.Fatal(<span class=\"string\">\"client error:\"</span>, err)\n        <span class=\"keyword\">return</span>\n    }\n    <span class=\"keyword\">defer</span> resp.Body.Close()\n    body, err := ioutil.ReadAll(resp.Body)\n    log.Println(<span class=\"keyword\">string</span>(body))\n}\n</code></pre>\n<p>在浏览器中测试<br> <img src=\"/res/22.png\" alt=\"\"></p>\n</li>\n</ol>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3><p>希望通过这次实例能让大家更好的理解、应用https，谢谢观看。<br>相关代码:<a href=\"https://github.com/flyingtime/go-https\">go-https</a></p>\n"},{"title":".Netcore Native测试","date":"2016-10-27T05:45:19.000Z","_content":"\n## 前言\n> .Netcore的两种部署模式:Framework-dependent deployments (FDD);Self-contained deployments (SCD);FDD感觉跟原来的托管程序是类似的，必须运行在.netcore的环境中，而SCD则是一个打包了所需运行环境的模式。比较感兴趣的是SCD模式，但是发现一个普通的hello world加上运行环境有45M大小。。。这两种模式都是在托管代码下运行的，那么有没有一种原生的编译方式呢？今天我们就折腾一下.netcore的native编译模式。\n\n## 具体步骤\n1. 本机系统环境\n![](/res/my_system.png)\n2. 安装所需环境\n    1. 安装openssl\n    ``` shell\n    brew upate\n    brew install openssl\n    brew link --force openssl\n    ``` \n    2. 安装cmake，下载最新版本的就可以 \n3. 构建ILCompiler\n    ``` shell\n    git clone https://github.com/dotnet/corert\n    cd corert/\n    ./build.sh clean Release\n    ``` \n4. 下载.NET Core SDK\n    1. 打开 https://github.com/dotnet/cli/\n    2. 找到 ![](/res/cli_list.png),注意下载标红的那栏\n    3. 安装下载的.NET Core SDK工具\n5. 创建新的测试程序\n    ``` shell\n    dotnet new -t console\n    ``` \n6. 在工程文件夹添加 NuGet.Config，文件内容如下：\n    ``` xml\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <packageSources>\n    <!--To inherit the global NuGet package sources remove the <clear/> line below -->\n    <clear />\n    <add key=\"dotnet-core\" value=\"https://dotnet.myget.org/F/dotnet-core/api/v3/index.json\" />\n    <add key=\"cli-deps\" value=\"https://dotnet.myget.org/F/cli-deps/api/v3/index.json\" />\n    <add key=\"xunit\" value=\"https://www.myget.org/F/xunit/api/v3/index.json\" />\n    <add key=\"api.nuget.org\" value=\"https://api.nuget.org/v3/index.json\" />\n  </packageSources>\n</configuration>\n    ``` \n7. 添加环境变量\n    在~/.bash_profile添加如下内容(请查看自己corert的项目地址)：\n    ``` shell\n    export IlcPath=\"/Users/mac/Documents/corert/bin/Product/OSX.x64.Release/packaging/publish1\"\n    ``` \n8. 执行restore\n    ``` shell\n    dotnet restore3\n    ``` \n9. 在*.csproj最后添加\n    ``` xml\n    <Import Project=\"$(IlcPath)\\Microsoft.NETCore.Native.targets\" />\n    ``` \n10. 构建Natvie的测试程序\n    1. 使用RyuJIT\n        ``` shell\n        dotnet build3 /t:LinkNative /p:IlcPath=<repo_root>\\bin\\Product\\OSX.x64.Release\\packaging\\publish1\n        ``` \n        构建成功：\n        ![](/res/netnative.png)\n    2. 使用CPP代码生成器\n        ``` shell\n        dotnet build3 /t:LinkNative /p:IlcPath=<repo_root>\\bin\\Product\\OSX.x64.Release\\packaging\\publish1 /p:NativeCodeGen=cpp\n        ``` \n        > **注意** 在Mac系统下最后的/p:Additional Compiler Flags=/MTd是需要去掉的\n    3. 第一种方式生成的程序为5.3M，而第二种构建的方式生成的程序为3.2M。\n    \n## 后记\n.Net Core是一个很有前途的项目，M$再次用强大的实力让我折服，以后可以用C#写原生的代码了，native编译不再是梦想，C#的开发效率，C++的运行效率，开发周期跟运行时间的完美平衡，祝愿.Net Core项目更加强大，谢谢观看！\n        \n## 参考\n[.Netcore 程序部署](https://docs.microsoft.com/en-us/dotnet/articles/core/deploying/)\n[獨立的 .NET Core 應用程式](https://blogs.msdn.microsoft.com/msdntaiwan/2016/09/20/selfcontainednetcoreapplications/)\n[构建ILCompiler所需环境](https://github.com/dotnet/corert/blob/master/Documentation/prerequisites-for-building.md)\n[构建ILCompiler程序](https://github.com/dotnet/corert/blob/master/Documentation/how-to-build-and-run-ilcompiler-in-console-shell-prompt.md)\n\n\n\n\n\n","source":"_posts/Netcore-Native测试.md","raw":"---\ntitle: .Netcore Native测试\ndate: 2016-10-27 13:45:19\ntags: [c#,.netcore,native]\ncategories: [c#,.net core]\n---\n\n## 前言\n> .Netcore的两种部署模式:Framework-dependent deployments (FDD);Self-contained deployments (SCD);FDD感觉跟原来的托管程序是类似的，必须运行在.netcore的环境中，而SCD则是一个打包了所需运行环境的模式。比较感兴趣的是SCD模式，但是发现一个普通的hello world加上运行环境有45M大小。。。这两种模式都是在托管代码下运行的，那么有没有一种原生的编译方式呢？今天我们就折腾一下.netcore的native编译模式。\n\n## 具体步骤\n1. 本机系统环境\n![](/res/my_system.png)\n2. 安装所需环境\n    1. 安装openssl\n    ``` shell\n    brew upate\n    brew install openssl\n    brew link --force openssl\n    ``` \n    2. 安装cmake，下载最新版本的就可以 \n3. 构建ILCompiler\n    ``` shell\n    git clone https://github.com/dotnet/corert\n    cd corert/\n    ./build.sh clean Release\n    ``` \n4. 下载.NET Core SDK\n    1. 打开 https://github.com/dotnet/cli/\n    2. 找到 ![](/res/cli_list.png),注意下载标红的那栏\n    3. 安装下载的.NET Core SDK工具\n5. 创建新的测试程序\n    ``` shell\n    dotnet new -t console\n    ``` \n6. 在工程文件夹添加 NuGet.Config，文件内容如下：\n    ``` xml\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <packageSources>\n    <!--To inherit the global NuGet package sources remove the <clear/> line below -->\n    <clear />\n    <add key=\"dotnet-core\" value=\"https://dotnet.myget.org/F/dotnet-core/api/v3/index.json\" />\n    <add key=\"cli-deps\" value=\"https://dotnet.myget.org/F/cli-deps/api/v3/index.json\" />\n    <add key=\"xunit\" value=\"https://www.myget.org/F/xunit/api/v3/index.json\" />\n    <add key=\"api.nuget.org\" value=\"https://api.nuget.org/v3/index.json\" />\n  </packageSources>\n</configuration>\n    ``` \n7. 添加环境变量\n    在~/.bash_profile添加如下内容(请查看自己corert的项目地址)：\n    ``` shell\n    export IlcPath=\"/Users/mac/Documents/corert/bin/Product/OSX.x64.Release/packaging/publish1\"\n    ``` \n8. 执行restore\n    ``` shell\n    dotnet restore3\n    ``` \n9. 在*.csproj最后添加\n    ``` xml\n    <Import Project=\"$(IlcPath)\\Microsoft.NETCore.Native.targets\" />\n    ``` \n10. 构建Natvie的测试程序\n    1. 使用RyuJIT\n        ``` shell\n        dotnet build3 /t:LinkNative /p:IlcPath=<repo_root>\\bin\\Product\\OSX.x64.Release\\packaging\\publish1\n        ``` \n        构建成功：\n        ![](/res/netnative.png)\n    2. 使用CPP代码生成器\n        ``` shell\n        dotnet build3 /t:LinkNative /p:IlcPath=<repo_root>\\bin\\Product\\OSX.x64.Release\\packaging\\publish1 /p:NativeCodeGen=cpp\n        ``` \n        > **注意** 在Mac系统下最后的/p:Additional Compiler Flags=/MTd是需要去掉的\n    3. 第一种方式生成的程序为5.3M，而第二种构建的方式生成的程序为3.2M。\n    \n## 后记\n.Net Core是一个很有前途的项目，M$再次用强大的实力让我折服，以后可以用C#写原生的代码了，native编译不再是梦想，C#的开发效率，C++的运行效率，开发周期跟运行时间的完美平衡，祝愿.Net Core项目更加强大，谢谢观看！\n        \n## 参考\n[.Netcore 程序部署](https://docs.microsoft.com/en-us/dotnet/articles/core/deploying/)\n[獨立的 .NET Core 應用程式](https://blogs.msdn.microsoft.com/msdntaiwan/2016/09/20/selfcontainednetcoreapplications/)\n[构建ILCompiler所需环境](https://github.com/dotnet/corert/blob/master/Documentation/prerequisites-for-building.md)\n[构建ILCompiler程序](https://github.com/dotnet/corert/blob/master/Documentation/how-to-build-and-run-ilcompiler-in-console-shell-prompt.md)\n\n\n\n\n\n","slug":"Netcore-Native测试","published":1,"updated":"2016-10-27T08:20:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciusgcbkr0001c80awq9zoirs","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>.Netcore的两种部署模式:Framework-dependent deployments (FDD);Self-contained deployments (SCD);FDD感觉跟原来的托管程序是类似的，必须运行在.netcore的环境中，而SCD则是一个打包了所需运行环境的模式。比较感兴趣的是SCD模式，但是发现一个普通的hello world加上运行环境有45M大小。。。这两种模式都是在托管代码下运行的，那么有没有一种原生的编译方式呢？今天我们就折腾一下.netcore的native编译模式。</p>\n</blockquote>\n<h2 id=\"具体步骤\"><a href=\"#具体步骤\" class=\"headerlink\" title=\"具体步骤\"></a>具体步骤</h2><ol>\n<li>本机系统环境<br><img src=\"/res/my_system.png\" alt=\"\"></li>\n<li>安装所需环境<ol>\n<li>安装openssl<pre><code class=\"shell\">brew upate\nbrew install openssl\nbrew link --force openssl\n</code></pre>\n</li>\n<li>安装cmake，下载最新版本的就可以 </li>\n</ol>\n</li>\n<li>构建ILCompiler<pre><code class=\"shell\">git clone https://github.com/dotnet/corert\ncd corert/\n./build.sh clean Release\n</code></pre>\n</li>\n<li>下载.NET Core SDK<ol>\n<li>打开 <a href=\"https://github.com/dotnet/cli/\" target=\"_blank\" rel=\"external\">https://github.com/dotnet/cli/</a></li>\n<li>找到 <img src=\"/res/cli_list.png\" alt=\"\">,注意下载标红的那栏</li>\n<li>安装下载的.NET Core SDK工具</li>\n</ol>\n</li>\n<li>创建新的测试程序<pre><code class=\"shell\">dotnet new -t console\n</code></pre>\n</li>\n<li>在工程文件夹添加 NuGet.Config，文件内容如下：<pre><code class=\"xml\"> &lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n<span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"name\">packageSources</span>&gt;</span>\n <span class=\"comment\">&lt;!--To inherit the global NuGet package sources remove the &lt;clear/&gt; line below --&gt;</span>\n <span class=\"tag\">&lt;<span class=\"name\">clear</span> /&gt;</span>\n <span class=\"tag\">&lt;<span class=\"name\">add</span> <span class=\"attr\">key</span>=<span class=\"string\">\"dotnet-core\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"https://dotnet.myget.org/F/dotnet-core/api/v3/index.json\"</span> /&gt;</span>\n <span class=\"tag\">&lt;<span class=\"name\">add</span> <span class=\"attr\">key</span>=<span class=\"string\">\"cli-deps\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"https://dotnet.myget.org/F/cli-deps/api/v3/index.json\"</span> /&gt;</span>\n <span class=\"tag\">&lt;<span class=\"name\">add</span> <span class=\"attr\">key</span>=<span class=\"string\">\"xunit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"https://www.myget.org/F/xunit/api/v3/index.json\"</span> /&gt;</span>\n <span class=\"tag\">&lt;<span class=\"name\">add</span> <span class=\"attr\">key</span>=<span class=\"string\">\"api.nuget.org\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"https://api.nuget.org/v3/index.json\"</span> /&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"name\">packageSources</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span>\n</code></pre>\n</li>\n<li>添加环境变量<br> 在~/.bash_profile添加如下内容(请查看自己corert的项目地址)：<pre><code class=\"shell\">export IlcPath=&quot;/Users/mac/Documents/corert/bin/Product/OSX.x64.Release/packaging/publish1&quot;\n</code></pre>\n</li>\n<li>执行restore<pre><code class=\"shell\">dotnet restore3\n</code></pre>\n</li>\n<li>在*.csproj最后添加<pre><code class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Import</span> <span class=\"attr\">Project</span>=<span class=\"string\">\"$(IlcPath)\\Microsoft.NETCore.Native.targets\"</span> /&gt;</span>\n</code></pre>\n</li>\n<li>构建Natvie的测试程序<ol>\n<li>使用RyuJIT<pre><code class=\"shell\">dotnet build3 /t:LinkNative /p:IlcPath=&lt;repo_root&gt;\\bin\\Product\\OSX.x64.Release\\packaging\\publish1\n</code></pre>\n 构建成功：<br> <img src=\"/res/netnative.png\" alt=\"\"></li>\n<li>使用CPP代码生成器<pre><code class=\"shell\">dotnet build3 /t:LinkNative /p:IlcPath=&lt;repo_root&gt;\\bin\\Product\\OSX.x64.Release\\packaging\\publish1 /p:NativeCodeGen=cpp\n</code></pre>\n<blockquote>\n<p><strong>注意</strong> 在Mac系统下最后的/p:Additional Compiler Flags=/MTd是需要去掉的</p>\n</blockquote>\n</li>\n<li>第一种方式生成的程序为5.3M，而第二种构建的方式生成的程序为3.2M。</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>.Net Core是一个很有前途的项目，M$再次用强大的实力让我折服，以后可以用C#写原生的代码了，native编译不再是梦想，C#的开发效率，C++的运行效率，开发周期跟运行时间的完美平衡，祝愿.Net Core项目更加强大，谢谢观看！</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://docs.microsoft.com/en-us/dotnet/articles/core/deploying/\" target=\"_blank\" rel=\"external\">.Netcore 程序部署</a><br><a href=\"https://blogs.msdn.microsoft.com/msdntaiwan/2016/09/20/selfcontainednetcoreapplications/\" target=\"_blank\" rel=\"external\">獨立的 .NET Core 應用程式</a><br><a href=\"https://github.com/dotnet/corert/blob/master/Documentation/prerequisites-for-building.md\" target=\"_blank\" rel=\"external\">构建ILCompiler所需环境</a><br><a href=\"https://github.com/dotnet/corert/blob/master/Documentation/how-to-build-and-run-ilcompiler-in-console-shell-prompt.md\" target=\"_blank\" rel=\"external\">构建ILCompiler程序</a></p>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>.Netcore的两种部署模式:Framework-dependent deployments (FDD);Self-contained deployments (SCD);FDD感觉跟原来的托管程序是类似的，必须运行在.netcore的环境中，而SCD则是一个打包了所需运行环境的模式。比较感兴趣的是SCD模式，但是发现一个普通的hello world加上运行环境有45M大小。。。这两种模式都是在托管代码下运行的，那么有没有一种原生的编译方式呢？今天我们就折腾一下.netcore的native编译模式。</p>\n</blockquote>\n<h2 id=\"具体步骤\"><a href=\"#具体步骤\" class=\"headerlink\" title=\"具体步骤\"></a>具体步骤</h2><ol>\n<li>本机系统环境<br><img src=\"/res/my_system.png\" alt=\"\"></li>\n<li>安装所需环境<ol>\n<li>安装openssl<pre><code class=\"shell\">brew upate\nbrew install openssl\nbrew link --force openssl\n</code></pre>\n</li>\n<li>安装cmake，下载最新版本的就可以 </li>\n</ol>\n</li>\n<li>构建ILCompiler<pre><code class=\"shell\">git clone https://github.com/dotnet/corert\ncd corert/\n./build.sh clean Release\n</code></pre>\n</li>\n<li>下载.NET Core SDK<ol>\n<li>打开 <a href=\"https://github.com/dotnet/cli/\">https://github.com/dotnet/cli/</a></li>\n<li>找到 <img src=\"/res/cli_list.png\" alt=\"\">,注意下载标红的那栏</li>\n<li>安装下载的.NET Core SDK工具</li>\n</ol>\n</li>\n<li>创建新的测试程序<pre><code class=\"shell\">dotnet new -t console\n</code></pre>\n</li>\n<li>在工程文件夹添加 NuGet.Config，文件内容如下：<pre><code class=\"xml\"> &lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n<span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"name\">packageSources</span>&gt;</span>\n <span class=\"comment\">&lt;!--To inherit the global NuGet package sources remove the &lt;clear/&gt; line below --&gt;</span>\n <span class=\"tag\">&lt;<span class=\"name\">clear</span> /&gt;</span>\n <span class=\"tag\">&lt;<span class=\"name\">add</span> <span class=\"attr\">key</span>=<span class=\"string\">\"dotnet-core\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"https://dotnet.myget.org/F/dotnet-core/api/v3/index.json\"</span> /&gt;</span>\n <span class=\"tag\">&lt;<span class=\"name\">add</span> <span class=\"attr\">key</span>=<span class=\"string\">\"cli-deps\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"https://dotnet.myget.org/F/cli-deps/api/v3/index.json\"</span> /&gt;</span>\n <span class=\"tag\">&lt;<span class=\"name\">add</span> <span class=\"attr\">key</span>=<span class=\"string\">\"xunit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"https://www.myget.org/F/xunit/api/v3/index.json\"</span> /&gt;</span>\n <span class=\"tag\">&lt;<span class=\"name\">add</span> <span class=\"attr\">key</span>=<span class=\"string\">\"api.nuget.org\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"https://api.nuget.org/v3/index.json\"</span> /&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"name\">packageSources</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span>\n</code></pre>\n</li>\n<li>添加环境变量<br> 在~/.bash_profile添加如下内容(请查看自己corert的项目地址)：<pre><code class=\"shell\">export IlcPath=&quot;/Users/mac/Documents/corert/bin/Product/OSX.x64.Release/packaging/publish1&quot;\n</code></pre>\n</li>\n<li>执行restore<pre><code class=\"shell\">dotnet restore3\n</code></pre>\n</li>\n<li>在*.csproj最后添加<pre><code class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Import</span> <span class=\"attr\">Project</span>=<span class=\"string\">\"$(IlcPath)\\Microsoft.NETCore.Native.targets\"</span> /&gt;</span>\n</code></pre>\n</li>\n<li>构建Natvie的测试程序<ol>\n<li>使用RyuJIT<pre><code class=\"shell\">dotnet build3 /t:LinkNative /p:IlcPath=&lt;repo_root&gt;\\bin\\Product\\OSX.x64.Release\\packaging\\publish1\n</code></pre>\n 构建成功：<br> <img src=\"/res/netnative.png\" alt=\"\"></li>\n<li>使用CPP代码生成器<pre><code class=\"shell\">dotnet build3 /t:LinkNative /p:IlcPath=&lt;repo_root&gt;\\bin\\Product\\OSX.x64.Release\\packaging\\publish1 /p:NativeCodeGen=cpp\n</code></pre>\n<blockquote>\n<p><strong>注意</strong> 在Mac系统下最后的/p:Additional Compiler Flags=/MTd是需要去掉的</p>\n</blockquote>\n</li>\n<li>第一种方式生成的程序为5.3M，而第二种构建的方式生成的程序为3.2M。</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>.Net Core是一个很有前途的项目，M$再次用强大的实力让我折服，以后可以用C#写原生的代码了，native编译不再是梦想，C#的开发效率，C++的运行效率，开发周期跟运行时间的完美平衡，祝愿.Net Core项目更加强大，谢谢观看！</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://docs.microsoft.com/en-us/dotnet/articles/core/deploying/\">.Netcore 程序部署</a><br><a href=\"https://blogs.msdn.microsoft.com/msdntaiwan/2016/09/20/selfcontainednetcoreapplications/\">獨立的 .NET Core 應用程式</a><br><a href=\"https://github.com/dotnet/corert/blob/master/Documentation/prerequisites-for-building.md\">构建ILCompiler所需环境</a><br><a href=\"https://github.com/dotnet/corert/blob/master/Documentation/how-to-build-and-run-ilcompiler-in-console-shell-prompt.md\">构建ILCompiler程序</a></p>\n"},{"title":"VS2015 Entity Framework 6.x Mysql的一些问题","date":"2016-06-29T10:50:36.000Z","_content":"\n## 前言\n> 在VS 2015中使用Entity Framework 6.x时，连接Mysql数据库常会出现一些问题，在这里记录了一些自己在项目中遇到的问题，希望大家可以参考一下，在以后的项目中避免在类似的问题中花费过多的时间\n\n## 常见问题\n- 如果自己在系统中安装了mysql connector，并且自己在项目中使用Nuget安装了新的Entity FrameWork for Mysql，当Mysql.Data.Core的版本跟mysql connector中的版本不一致的话会出现一些莫名其妙的问题。可以在直接删除mysql connector工具或者在项目引用中添加mysql connector的中Mysql.Data.dll、Mysql.Web.dll、Mysql.Data.Entity.EF6.dll\n- 修改web.config或者app.config\n  删除：\n  ``` xml\n  <entityFramework>\n    <defaultConnectionFactory type=\"System.Data.Entity.Infrastructure.LocalDbConnectionFactory, EntityFramework\">\n      <parameters>\n        <parameter value=\"v11.0\" />\n      </parameters>\n    </defaultConnectionFactory>\n    <providers>\n      <provider invariantName=\"System.Data.SqlClient\" type=\"System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer\" />\n    </providers>\n  </entityFramework>\n  ``` \n  添加：\n  ``` xml\n  <entityFramework>\n    <defaultConnectionFactory type=\"MySql.Data.Entity.MySqlConnectionFactory, MySql.Data.Entity.EF6\" />\n    <providers>\n      <provider invariantName=\"MySql.Data.MySqlClient\" type=\"MySql.Data.MySqlClient.MySqlProviderServices, MySql.Data.Entity.EF6\" />\n    </providers>\n </entityFramework>\n  ```   \n- 连接Mysql出现的一个错误：\n  ![](/res/mysql_error.png)\n  这其实是个bug,mysql的bug... ...解决方法很简单,要把mysql的一个优化项给关了.\n  详见：[http://stackoverflow.com/questions/33575109/mysql-entity-the-value-for-column-isprimarykey-in-table-tabledetails-is](http://stackoverflow.com/questions/33575109/mysql-entity-the-value-for-column-isprimarykey-in-table-tabledetails-is)\n    > Open Services (services.msc) and restart MySQL57 service.\n    > Execute the following commands in MySQL. use database_name;\n    > Set global optimizer_switch='derived_merge=off';\n    > Set optimizer_switch='derived_merge=off'.\n    \n- 在Add-Migration 的时候出现“未为提供程序“MySql.Data.MySqlClient”找到任何 MigrationSqlGenerator。请在目标迁移配置类中使用 SetSqlGenerator 方法以注册其他 SQL 生成器”,解决办法：在DbContext类上面添加特性:\n  ``` c# \n  [DbConfigurationType(typeof(MySql.Data.Entity.MySqlEFConfiguration))]\n  public class XXDbContext : DbContext\n  { \n  }\n  ``` \n- 当在XXDbContext中添加特性：[DbConfigurationType(typeof(MySql.Data.Entity.MySqlEFConfiguration))]，在创建新的controller时，会出现如下错误：\n  ![](/res/mysql_migration_error.png)\n  解决办法：\n  1. 在创建controller时注释掉[DbConfigurationType(typeof(MySql.Data.Entity.MySqlEFConfiguration))]\n  2. 在Add-Migration时取消注释[DbConfigurationType(typeof(MySql.Data.Entity.MySqlEFConfiguration))]\n  \n## 参考\n[http://stackoverflow.com/questions/21867662/ef6-and-mysql-generate-database-from-model](http://stackoverflow.com/questions/21867662/ef6-and-mysql-generate-database-from-model)\n[http://bbs.kechuang.org/f/373/79769](http://bbs.kechuang.org/f/373/79769)\n[http://forums.mysql.com/read.php?174,601264,601264](http://forums.mysql.com/read.php?174,601264,601264)\n[http://www.cnblogs.com/buyixiaohan/p/4551279.html](http://www.cnblogs.com/buyixiaohan/p/4551279.html)\n\n","source":"_posts/VS2015-Entity-Framework-6-x-Mysql的一些问题.md","raw":"---\ntitle: VS2015 Entity Framework 6.x Mysql的一些问题\ndate: 2016-06-29 18:50:36\ntags: [c#,asp.net,entity framework,mysql]\n---\n\n## 前言\n> 在VS 2015中使用Entity Framework 6.x时，连接Mysql数据库常会出现一些问题，在这里记录了一些自己在项目中遇到的问题，希望大家可以参考一下，在以后的项目中避免在类似的问题中花费过多的时间\n\n## 常见问题\n- 如果自己在系统中安装了mysql connector，并且自己在项目中使用Nuget安装了新的Entity FrameWork for Mysql，当Mysql.Data.Core的版本跟mysql connector中的版本不一致的话会出现一些莫名其妙的问题。可以在直接删除mysql connector工具或者在项目引用中添加mysql connector的中Mysql.Data.dll、Mysql.Web.dll、Mysql.Data.Entity.EF6.dll\n- 修改web.config或者app.config\n  删除：\n  ``` xml\n  <entityFramework>\n    <defaultConnectionFactory type=\"System.Data.Entity.Infrastructure.LocalDbConnectionFactory, EntityFramework\">\n      <parameters>\n        <parameter value=\"v11.0\" />\n      </parameters>\n    </defaultConnectionFactory>\n    <providers>\n      <provider invariantName=\"System.Data.SqlClient\" type=\"System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer\" />\n    </providers>\n  </entityFramework>\n  ``` \n  添加：\n  ``` xml\n  <entityFramework>\n    <defaultConnectionFactory type=\"MySql.Data.Entity.MySqlConnectionFactory, MySql.Data.Entity.EF6\" />\n    <providers>\n      <provider invariantName=\"MySql.Data.MySqlClient\" type=\"MySql.Data.MySqlClient.MySqlProviderServices, MySql.Data.Entity.EF6\" />\n    </providers>\n </entityFramework>\n  ```   \n- 连接Mysql出现的一个错误：\n  ![](/res/mysql_error.png)\n  这其实是个bug,mysql的bug... ...解决方法很简单,要把mysql的一个优化项给关了.\n  详见：[http://stackoverflow.com/questions/33575109/mysql-entity-the-value-for-column-isprimarykey-in-table-tabledetails-is](http://stackoverflow.com/questions/33575109/mysql-entity-the-value-for-column-isprimarykey-in-table-tabledetails-is)\n    > Open Services (services.msc) and restart MySQL57 service.\n    > Execute the following commands in MySQL. use database_name;\n    > Set global optimizer_switch='derived_merge=off';\n    > Set optimizer_switch='derived_merge=off'.\n    \n- 在Add-Migration 的时候出现“未为提供程序“MySql.Data.MySqlClient”找到任何 MigrationSqlGenerator。请在目标迁移配置类中使用 SetSqlGenerator 方法以注册其他 SQL 生成器”,解决办法：在DbContext类上面添加特性:\n  ``` c# \n  [DbConfigurationType(typeof(MySql.Data.Entity.MySqlEFConfiguration))]\n  public class XXDbContext : DbContext\n  { \n  }\n  ``` \n- 当在XXDbContext中添加特性：[DbConfigurationType(typeof(MySql.Data.Entity.MySqlEFConfiguration))]，在创建新的controller时，会出现如下错误：\n  ![](/res/mysql_migration_error.png)\n  解决办法：\n  1. 在创建controller时注释掉[DbConfigurationType(typeof(MySql.Data.Entity.MySqlEFConfiguration))]\n  2. 在Add-Migration时取消注释[DbConfigurationType(typeof(MySql.Data.Entity.MySqlEFConfiguration))]\n  \n## 参考\n[http://stackoverflow.com/questions/21867662/ef6-and-mysql-generate-database-from-model](http://stackoverflow.com/questions/21867662/ef6-and-mysql-generate-database-from-model)\n[http://bbs.kechuang.org/f/373/79769](http://bbs.kechuang.org/f/373/79769)\n[http://forums.mysql.com/read.php?174,601264,601264](http://forums.mysql.com/read.php?174,601264,601264)\n[http://www.cnblogs.com/buyixiaohan/p/4551279.html](http://www.cnblogs.com/buyixiaohan/p/4551279.html)\n\n","slug":"VS2015-Entity-Framework-6-x-Mysql的一些问题","published":1,"updated":"2016-10-27T14:33:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciusgcbky0004c80alks3njqa","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>在VS 2015中使用Entity Framework 6.x时，连接Mysql数据库常会出现一些问题，在这里记录了一些自己在项目中遇到的问题，希望大家可以参考一下，在以后的项目中避免在类似的问题中花费过多的时间</p>\n</blockquote>\n<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2><ul>\n<li>如果自己在系统中安装了mysql connector，并且自己在项目中使用Nuget安装了新的Entity FrameWork for Mysql，当Mysql.Data.Core的版本跟mysql connector中的版本不一致的话会出现一些莫名其妙的问题。可以在直接删除mysql connector工具或者在项目引用中添加mysql connector的中Mysql.Data.dll、Mysql.Web.dll、Mysql.Data.Entity.EF6.dll</li>\n<li>修改web.config或者app.config<br>删除：<pre><code class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">entityFramework</span>&gt;</span>\n  <span class=\"tag\">&lt;<span class=\"name\">defaultConnectionFactory</span> <span class=\"attr\">type</span>=<span class=\"string\">\"System.Data.Entity.Infrastructure.LocalDbConnectionFactory, EntityFramework\"</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"name\">parameters</span>&gt;</span>\n      <span class=\"tag\">&lt;<span class=\"name\">parameter</span> <span class=\"attr\">value</span>=<span class=\"string\">\"v11.0\"</span> /&gt;</span>\n    <span class=\"tag\">&lt;/<span class=\"name\">parameters</span>&gt;</span>\n  <span class=\"tag\">&lt;/<span class=\"name\">defaultConnectionFactory</span>&gt;</span>\n  <span class=\"tag\">&lt;<span class=\"name\">providers</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"name\">provider</span> <span class=\"attr\">invariantName</span>=<span class=\"string\">\"System.Data.SqlClient\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer\"</span> /&gt;</span>\n  <span class=\"tag\">&lt;/<span class=\"name\">providers</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"name\">entityFramework</span>&gt;</span>\n</code></pre>\n添加：<pre><code class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">entityFramework</span>&gt;</span>\n  <span class=\"tag\">&lt;<span class=\"name\">defaultConnectionFactory</span> <span class=\"attr\">type</span>=<span class=\"string\">\"MySql.Data.Entity.MySqlConnectionFactory, MySql.Data.Entity.EF6\"</span> /&gt;</span>\n  <span class=\"tag\">&lt;<span class=\"name\">providers</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"name\">provider</span> <span class=\"attr\">invariantName</span>=<span class=\"string\">\"MySql.Data.MySqlClient\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"MySql.Data.MySqlClient.MySqlProviderServices, MySql.Data.Entity.EF6\"</span> /&gt;</span>\n  <span class=\"tag\">&lt;/<span class=\"name\">providers</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"name\">entityFramework</span>&gt;</span>\n</code></pre>\n</li>\n<li><p>连接Mysql出现的一个错误：<br><img src=\"/res/mysql_error.png\" alt=\"\"><br>这其实是个bug,mysql的bug… …解决方法很简单,要把mysql的一个优化项给关了.<br>详见：<a href=\"http://stackoverflow.com/questions/33575109/mysql-entity-the-value-for-column-isprimarykey-in-table-tabledetails-is\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/33575109/mysql-entity-the-value-for-column-isprimarykey-in-table-tabledetails-is</a></p>\n<blockquote>\n<p>Open Services (services.msc) and restart MySQL57 service.<br>Execute the following commands in MySQL. use database_name;<br>Set global optimizer_switch=’derived_merge=off’;<br>Set optimizer_switch=’derived_merge=off’.</p>\n</blockquote>\n</li>\n<li><p>在Add-Migration 的时候出现“未为提供程序“MySql.Data.MySqlClient”找到任何 MigrationSqlGenerator。请在目标迁移配置类中使用 SetSqlGenerator 方法以注册其他 SQL 生成器”,解决办法：在DbContext类上面添加特性:</p>\n<pre><code class=\"c#\">[DbConfigurationType(typeof(MySql.Data.Entity.MySqlEFConfiguration))]\npublic class XXDbContext : DbContext\n{ \n}\n</code></pre>\n</li>\n<li>当在XXDbContext中添加特性：[DbConfigurationType(typeof(MySql.Data.Entity.MySqlEFConfiguration))]，在创建新的controller时，会出现如下错误：<br><img src=\"/res/mysql_migration_error.png\" alt=\"\"><br>解决办法：<ol>\n<li>在创建controller时注释掉[DbConfigurationType(typeof(MySql.Data.Entity.MySqlEFConfiguration))]</li>\n<li>在Add-Migration时取消注释[DbConfigurationType(typeof(MySql.Data.Entity.MySqlEFConfiguration))]</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://stackoverflow.com/questions/21867662/ef6-and-mysql-generate-database-from-model\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/21867662/ef6-and-mysql-generate-database-from-model</a><br><a href=\"http://bbs.kechuang.org/f/373/79769\" target=\"_blank\" rel=\"external\">http://bbs.kechuang.org/f/373/79769</a><br><a href=\"http://forums.mysql.com/read.php?174,601264,601264\" target=\"_blank\" rel=\"external\">http://forums.mysql.com/read.php?174,601264,601264</a><br><a href=\"http://www.cnblogs.com/buyixiaohan/p/4551279.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/buyixiaohan/p/4551279.html</a></p>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>在VS 2015中使用Entity Framework 6.x时，连接Mysql数据库常会出现一些问题，在这里记录了一些自己在项目中遇到的问题，希望大家可以参考一下，在以后的项目中避免在类似的问题中花费过多的时间</p>\n</blockquote>\n<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2><ul>\n<li>如果自己在系统中安装了mysql connector，并且自己在项目中使用Nuget安装了新的Entity FrameWork for Mysql，当Mysql.Data.Core的版本跟mysql connector中的版本不一致的话会出现一些莫名其妙的问题。可以在直接删除mysql connector工具或者在项目引用中添加mysql connector的中Mysql.Data.dll、Mysql.Web.dll、Mysql.Data.Entity.EF6.dll</li>\n<li>修改web.config或者app.config<br>删除：<pre><code class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">entityFramework</span>&gt;</span>\n  <span class=\"tag\">&lt;<span class=\"name\">defaultConnectionFactory</span> <span class=\"attr\">type</span>=<span class=\"string\">\"System.Data.Entity.Infrastructure.LocalDbConnectionFactory, EntityFramework\"</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"name\">parameters</span>&gt;</span>\n      <span class=\"tag\">&lt;<span class=\"name\">parameter</span> <span class=\"attr\">value</span>=<span class=\"string\">\"v11.0\"</span> /&gt;</span>\n    <span class=\"tag\">&lt;/<span class=\"name\">parameters</span>&gt;</span>\n  <span class=\"tag\">&lt;/<span class=\"name\">defaultConnectionFactory</span>&gt;</span>\n  <span class=\"tag\">&lt;<span class=\"name\">providers</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"name\">provider</span> <span class=\"attr\">invariantName</span>=<span class=\"string\">\"System.Data.SqlClient\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer\"</span> /&gt;</span>\n  <span class=\"tag\">&lt;/<span class=\"name\">providers</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"name\">entityFramework</span>&gt;</span>\n</code></pre>\n添加：<pre><code class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">entityFramework</span>&gt;</span>\n  <span class=\"tag\">&lt;<span class=\"name\">defaultConnectionFactory</span> <span class=\"attr\">type</span>=<span class=\"string\">\"MySql.Data.Entity.MySqlConnectionFactory, MySql.Data.Entity.EF6\"</span> /&gt;</span>\n  <span class=\"tag\">&lt;<span class=\"name\">providers</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"name\">provider</span> <span class=\"attr\">invariantName</span>=<span class=\"string\">\"MySql.Data.MySqlClient\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"MySql.Data.MySqlClient.MySqlProviderServices, MySql.Data.Entity.EF6\"</span> /&gt;</span>\n  <span class=\"tag\">&lt;/<span class=\"name\">providers</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"name\">entityFramework</span>&gt;</span>\n</code></pre>\n</li>\n<li><p>连接Mysql出现的一个错误：<br><img src=\"/res/mysql_error.png\" alt=\"\"><br>这其实是个bug,mysql的bug… …解决方法很简单,要把mysql的一个优化项给关了.<br>详见：<a href=\"http://stackoverflow.com/questions/33575109/mysql-entity-the-value-for-column-isprimarykey-in-table-tabledetails-is\">http://stackoverflow.com/questions/33575109/mysql-entity-the-value-for-column-isprimarykey-in-table-tabledetails-is</a></p>\n<blockquote>\n<p>Open Services (services.msc) and restart MySQL57 service.<br>Execute the following commands in MySQL. use database_name;<br>Set global optimizer_switch=’derived_merge=off’;<br>Set optimizer_switch=’derived_merge=off’.</p>\n</blockquote>\n</li>\n<li><p>在Add-Migration 的时候出现“未为提供程序“MySql.Data.MySqlClient”找到任何 MigrationSqlGenerator。请在目标迁移配置类中使用 SetSqlGenerator 方法以注册其他 SQL 生成器”,解决办法：在DbContext类上面添加特性:</p>\n<pre><code class=\"c#\">[DbConfigurationType(typeof(MySql.Data.Entity.MySqlEFConfiguration))]\npublic class XXDbContext : DbContext\n{ \n}\n</code></pre>\n</li>\n<li>当在XXDbContext中添加特性：[DbConfigurationType(typeof(MySql.Data.Entity.MySqlEFConfiguration))]，在创建新的controller时，会出现如下错误：<br><img src=\"/res/mysql_migration_error.png\" alt=\"\"><br>解决办法：<ol>\n<li>在创建controller时注释掉[DbConfigurationType(typeof(MySql.Data.Entity.MySqlEFConfiguration))]</li>\n<li>在Add-Migration时取消注释[DbConfigurationType(typeof(MySql.Data.Entity.MySqlEFConfiguration))]</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://stackoverflow.com/questions/21867662/ef6-and-mysql-generate-database-from-model\">http://stackoverflow.com/questions/21867662/ef6-and-mysql-generate-database-from-model</a><br><a href=\"http://bbs.kechuang.org/f/373/79769\">http://bbs.kechuang.org/f/373/79769</a><br><a href=\"http://forums.mysql.com/read.php?174,601264,601264\">http://forums.mysql.com/read.php?174,601264,601264</a><br><a href=\"http://www.cnblogs.com/buyixiaohan/p/4551279.html\">http://www.cnblogs.com/buyixiaohan/p/4551279.html</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ciusgcbkm0000c80an83jzfow","category_id":"ciusgcbku0002c80aui9ihvyu","_id":"ciusgcbl20007c80a2qjqq9g1"},{"post_id":"ciusgcbkr0001c80awq9zoirs","category_id":"ciusgcbl10005c80ac5u2kxvn","_id":"ciusgcbl5000ec80all09vcvv"},{"post_id":"ciusgcbkr0001c80awq9zoirs","category_id":"ciusgcbl3000ac80akwmrz1pz","_id":"ciusgcbl5000fc80aofwsntbm"}],"PostTag":[{"post_id":"ciusgcbkm0000c80an83jzfow","tag_id":"ciusgcbkx0003c80ajytvj0q0","_id":"ciusgcbl30009c80a9g7a98mh"},{"post_id":"ciusgcbkm0000c80an83jzfow","tag_id":"ciusgcbl10006c80awo16dtnr","_id":"ciusgcbl4000bc80a3ol0x2wf"},{"post_id":"ciusgcbkr0001c80awq9zoirs","tag_id":"ciusgcbl30008c80atek9tzbb","_id":"ciusgcbl7000hc80a39z7dloy"},{"post_id":"ciusgcbkr0001c80awq9zoirs","tag_id":"ciusgcbl4000cc80avavcqusn","_id":"ciusgcbl7000ic80aimzplp3k"},{"post_id":"ciusgcbkr0001c80awq9zoirs","tag_id":"ciusgcbl4000dc80atqajk2o6","_id":"ciusgcbl8000kc80a8i5nzwvb"},{"post_id":"ciusgcbky0004c80alks3njqa","tag_id":"ciusgcbl30008c80atek9tzbb","_id":"ciusgcbl9000nc80abfhrs2dh"},{"post_id":"ciusgcbky0004c80alks3njqa","tag_id":"ciusgcbl7000jc80a4u1abhf9","_id":"ciusgcbla000oc80as36q7308"},{"post_id":"ciusgcbky0004c80alks3njqa","tag_id":"ciusgcbl8000lc80aq804337g","_id":"ciusgcbla000pc80asslosidi"},{"post_id":"ciusgcbky0004c80alks3njqa","tag_id":"ciusgcbl9000mc80a3378jese","_id":"ciusgcbla000qc80aqwxvox2a"}],"Tag":[{"name":"golang","_id":"ciusgcbkx0003c80ajytvj0q0"},{"name":"https","_id":"ciusgcbl10006c80awo16dtnr"},{"name":"c#","_id":"ciusgcbl30008c80atek9tzbb"},{"name":".netcore","_id":"ciusgcbl4000cc80avavcqusn"},{"name":"native","_id":"ciusgcbl4000dc80atqajk2o6"},{"name":"asp.net","_id":"ciusgcbl7000jc80a4u1abhf9"},{"name":"entity framework","_id":"ciusgcbl8000lc80aq804337g"},{"name":"mysql","_id":"ciusgcbl9000mc80a3378jese"}]}}